"use strict";
/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.4.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bungie-api-ts
 * Do not edit these files manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * There are many Progressions in Destiny (think Character Level, or Reputation).
 * These are the various "Scopes" of Progressions, which affect many things: *
 * Where/if they are stored * How they are calculated * Where they can be used in
 * other game logic
 */
var DestinyProgressionScope;
(function (DestinyProgressionScope) {
    DestinyProgressionScope[DestinyProgressionScope["Account"] = 0] = "Account";
    DestinyProgressionScope[DestinyProgressionScope["Character"] = 1] = "Character";
    DestinyProgressionScope[DestinyProgressionScope["Clan"] = 2] = "Clan";
    DestinyProgressionScope[DestinyProgressionScope["Item"] = 3] = "Item";
    DestinyProgressionScope[DestinyProgressionScope["ImplicitFromEquipment"] = 4] = "ImplicitFromEquipment";
    DestinyProgressionScope[DestinyProgressionScope["Mapped"] = 5] = "Mapped";
    DestinyProgressionScope[DestinyProgressionScope["MappedAggregate"] = 6] = "MappedAggregate";
    DestinyProgressionScope[DestinyProgressionScope["MappedStat"] = 7] = "MappedStat";
    DestinyProgressionScope[DestinyProgressionScope["MappedUnlockValue"] = 8] = "MappedUnlockValue";
})(DestinyProgressionScope = exports.DestinyProgressionScope || (exports.DestinyProgressionScope = {}));
/**
 * If progression is earned, this determines whether the progression shows visual
 * effects on the character or its item - or neither.
 */
var DestinyProgressionStepDisplayEffect;
(function (DestinyProgressionStepDisplayEffect) {
    DestinyProgressionStepDisplayEffect[DestinyProgressionStepDisplayEffect["None"] = 0] = "None";
    DestinyProgressionStepDisplayEffect[DestinyProgressionStepDisplayEffect["Character"] = 1] = "Character";
    DestinyProgressionStepDisplayEffect[DestinyProgressionStepDisplayEffect["Item"] = 2] = "Item";
})(DestinyProgressionStepDisplayEffect = exports.DestinyProgressionStepDisplayEffect || (exports.DestinyProgressionStepDisplayEffect = {}));
/**
 * There's a lot of places where we need to know scope on more than just a profile
 * or character level. For everything else, there's this more generic sense of
 * scope.
 */
var DestinyScope;
(function (DestinyScope) {
    DestinyScope[DestinyScope["Profile"] = 0] = "Profile";
    DestinyScope[DestinyScope["Character"] = 1] = "Character";
})(DestinyScope = exports.DestinyScope || (exports.DestinyScope = {}));
var DestinyPresentationNodeType;
(function (DestinyPresentationNodeType) {
    DestinyPresentationNodeType[DestinyPresentationNodeType["Default"] = 0] = "Default";
    DestinyPresentationNodeType[DestinyPresentationNodeType["Category"] = 1] = "Category";
    DestinyPresentationNodeType[DestinyPresentationNodeType["Collectibles"] = 2] = "Collectibles";
    DestinyPresentationNodeType[DestinyPresentationNodeType["Records"] = 3] = "Records";
})(DestinyPresentationNodeType = exports.DestinyPresentationNodeType || (exports.DestinyPresentationNodeType = {}));
/**
 * This enumeration represents the most restrictive type of gating that is being
 * performed by an entity. This is useful as a shortcut to avoid a lot of lookups
 * when determining whether the gating on an Entity applies to everyone equally, or
 * to their specific Profile or Character states.
 *
 * None = There is no gating on this item.
 *
 * Global = The gating on this item is based entirely on global game state. It will
 * be gated the same for everyone.
 *
 * Clan = The gating on this item is at the Clan level. For instance, if you're
 * gated by Clan level this will be the case.
 *
 * Profile = The gating includes Profile-specific checks, but not on the Profile's
 * characters. An example of this might be when you acquire an Emblem: the Emblem
 * will be available in your Kiosk for all characters in your Profile from that
 * point onward.
 *
 * Character = The gating includes Character-specific checks, including character
 * level restrictions. An example of this might be an item that you can't purchase
 * from a Vendor until you reach a specific Character Level.
 *
 * Item = The gating includes item-specific checks. For BNet, this generally
 * implies that we'll show this data only on a character level or deeper.
 *
 * AssumedWorstCase = The unlocks and checks being used for this calculation are of
 * an unknown type and are used for unknown purposes. For instance, if some great
 * person decided that an unlock value should be globally scoped, but then the game
 * changes it using character-specific data in a way that BNet doesn't know about.
 * Because of the open-ended potential for this to occur, many unlock checks for "
 * globally" scoped unlock data may be assumed as the worst case unless it has been
 * specifically whitelisted as otherwise. That sucks, but them's the breaks.
 */
var DestinyGatingScope;
(function (DestinyGatingScope) {
    DestinyGatingScope[DestinyGatingScope["None"] = 0] = "None";
    DestinyGatingScope[DestinyGatingScope["Global"] = 1] = "Global";
    DestinyGatingScope[DestinyGatingScope["Clan"] = 2] = "Clan";
    DestinyGatingScope[DestinyGatingScope["Profile"] = 3] = "Profile";
    DestinyGatingScope[DestinyGatingScope["Character"] = 4] = "Character";
    DestinyGatingScope[DestinyGatingScope["Item"] = 5] = "Item";
    DestinyGatingScope[DestinyGatingScope["AssumedWorstCase"] = 6] = "AssumedWorstCase";
})(DestinyGatingScope = exports.DestinyGatingScope || (exports.DestinyGatingScope = {}));
/**
 * For historical reasons, this list will have both D1 and D2-relevant Activity
 * Modes in it. Please don't take this to mean that some D1-only feature is coming
 * back!
 */
var DestinyActivityModeType;
(function (DestinyActivityModeType) {
    DestinyActivityModeType[DestinyActivityModeType["None"] = 0] = "None";
    DestinyActivityModeType[DestinyActivityModeType["Story"] = 2] = "Story";
    DestinyActivityModeType[DestinyActivityModeType["Strike"] = 3] = "Strike";
    DestinyActivityModeType[DestinyActivityModeType["Raid"] = 4] = "Raid";
    DestinyActivityModeType[DestinyActivityModeType["AllPvP"] = 5] = "AllPvP";
    DestinyActivityModeType[DestinyActivityModeType["Patrol"] = 6] = "Patrol";
    DestinyActivityModeType[DestinyActivityModeType["AllPvE"] = 7] = "AllPvE";
    DestinyActivityModeType[DestinyActivityModeType["Reserved9"] = 9] = "Reserved9";
    DestinyActivityModeType[DestinyActivityModeType["Control"] = 10] = "Control";
    DestinyActivityModeType[DestinyActivityModeType["Reserved11"] = 11] = "Reserved11";
    /**
     * Clash -> Destiny's name for Team Deathmatch. 4v4 combat, the team with the
     * highest kills at the end of time wins.
     */
    DestinyActivityModeType[DestinyActivityModeType["Clash"] = 12] = "Clash";
    DestinyActivityModeType[DestinyActivityModeType["Reserved13"] = 13] = "Reserved13";
    DestinyActivityModeType[DestinyActivityModeType["CrimsonDoubles"] = 15] = "CrimsonDoubles";
    DestinyActivityModeType[DestinyActivityModeType["Nightfall"] = 16] = "Nightfall";
    DestinyActivityModeType[DestinyActivityModeType["HeroicNightfall"] = 17] = "HeroicNightfall";
    DestinyActivityModeType[DestinyActivityModeType["AllStrikes"] = 18] = "AllStrikes";
    DestinyActivityModeType[DestinyActivityModeType["IronBanner"] = 19] = "IronBanner";
    DestinyActivityModeType[DestinyActivityModeType["Reserved20"] = 20] = "Reserved20";
    DestinyActivityModeType[DestinyActivityModeType["Reserved21"] = 21] = "Reserved21";
    DestinyActivityModeType[DestinyActivityModeType["Reserved22"] = 22] = "Reserved22";
    DestinyActivityModeType[DestinyActivityModeType["Reserved24"] = 24] = "Reserved24";
    DestinyActivityModeType[DestinyActivityModeType["AllMayhem"] = 25] = "AllMayhem";
    DestinyActivityModeType[DestinyActivityModeType["Reserved26"] = 26] = "Reserved26";
    DestinyActivityModeType[DestinyActivityModeType["Reserved27"] = 27] = "Reserved27";
    DestinyActivityModeType[DestinyActivityModeType["Reserved28"] = 28] = "Reserved28";
    DestinyActivityModeType[DestinyActivityModeType["Reserved29"] = 29] = "Reserved29";
    DestinyActivityModeType[DestinyActivityModeType["Reserved30"] = 30] = "Reserved30";
    DestinyActivityModeType[DestinyActivityModeType["Supremacy"] = 31] = "Supremacy";
    DestinyActivityModeType[DestinyActivityModeType["PrivateMatchesAll"] = 32] = "PrivateMatchesAll";
    DestinyActivityModeType[DestinyActivityModeType["Survival"] = 37] = "Survival";
    DestinyActivityModeType[DestinyActivityModeType["Countdown"] = 38] = "Countdown";
    DestinyActivityModeType[DestinyActivityModeType["TrialsOfTheNine"] = 39] = "TrialsOfTheNine";
    DestinyActivityModeType[DestinyActivityModeType["Social"] = 40] = "Social";
    DestinyActivityModeType[DestinyActivityModeType["TrialsCountdown"] = 41] = "TrialsCountdown";
    DestinyActivityModeType[DestinyActivityModeType["TrialsSurvival"] = 42] = "TrialsSurvival";
    DestinyActivityModeType[DestinyActivityModeType["IronBannerControl"] = 43] = "IronBannerControl";
    DestinyActivityModeType[DestinyActivityModeType["IronBannerClash"] = 44] = "IronBannerClash";
    DestinyActivityModeType[DestinyActivityModeType["IronBannerSupremacy"] = 45] = "IronBannerSupremacy";
    DestinyActivityModeType[DestinyActivityModeType["ScoredNightfall"] = 46] = "ScoredNightfall";
    DestinyActivityModeType[DestinyActivityModeType["ScoredHeroicNightfall"] = 47] = "ScoredHeroicNightfall";
    DestinyActivityModeType[DestinyActivityModeType["Rumble"] = 48] = "Rumble";
    DestinyActivityModeType[DestinyActivityModeType["AllDoubles"] = 49] = "AllDoubles";
    DestinyActivityModeType[DestinyActivityModeType["Doubles"] = 50] = "Doubles";
    DestinyActivityModeType[DestinyActivityModeType["PrivateMatchesClash"] = 51] = "PrivateMatchesClash";
    DestinyActivityModeType[DestinyActivityModeType["PrivateMatchesControl"] = 52] = "PrivateMatchesControl";
    DestinyActivityModeType[DestinyActivityModeType["PrivateMatchesSupremacy"] = 53] = "PrivateMatchesSupremacy";
    DestinyActivityModeType[DestinyActivityModeType["PrivateMatchesCountdown"] = 54] = "PrivateMatchesCountdown";
    DestinyActivityModeType[DestinyActivityModeType["PrivateMatchesSurvival"] = 55] = "PrivateMatchesSurvival";
    DestinyActivityModeType[DestinyActivityModeType["PrivateMatchesMayhem"] = 56] = "PrivateMatchesMayhem";
    DestinyActivityModeType[DestinyActivityModeType["PrivateMatchesRumble"] = 57] = "PrivateMatchesRumble";
    DestinyActivityModeType[DestinyActivityModeType["HeroicAdventure"] = 58] = "HeroicAdventure";
    DestinyActivityModeType[DestinyActivityModeType["Showdown"] = 59] = "Showdown";
    DestinyActivityModeType[DestinyActivityModeType["Lockdown"] = 60] = "Lockdown";
    DestinyActivityModeType[DestinyActivityModeType["Scorched"] = 61] = "Scorched";
    DestinyActivityModeType[DestinyActivityModeType["ScorchedTeam"] = 62] = "ScorchedTeam";
    DestinyActivityModeType[DestinyActivityModeType["Gambit"] = 63] = "Gambit";
    DestinyActivityModeType[DestinyActivityModeType["AllPvECompetitive"] = 64] = "AllPvECompetitive";
    DestinyActivityModeType[DestinyActivityModeType["Breakthrough"] = 65] = "Breakthrough";
    DestinyActivityModeType[DestinyActivityModeType["BlackArmoryRun"] = 66] = "BlackArmoryRun";
    DestinyActivityModeType[DestinyActivityModeType["Salvage"] = 67] = "Salvage";
    DestinyActivityModeType[DestinyActivityModeType["IronBannerSalvage"] = 68] = "IronBannerSalvage";
    DestinyActivityModeType[DestinyActivityModeType["PvPCompetitive"] = 69] = "PvPCompetitive";
    DestinyActivityModeType[DestinyActivityModeType["PvPQuickplay"] = 70] = "PvPQuickplay";
    DestinyActivityModeType[DestinyActivityModeType["ClashQuickplay"] = 71] = "ClashQuickplay";
    DestinyActivityModeType[DestinyActivityModeType["ClashCompetitive"] = 72] = "ClashCompetitive";
    DestinyActivityModeType[DestinyActivityModeType["ControlQuickplay"] = 73] = "ControlQuickplay";
    DestinyActivityModeType[DestinyActivityModeType["ControlCompetitive"] = 74] = "ControlCompetitive";
    DestinyActivityModeType[DestinyActivityModeType["GambitPrime"] = 75] = "GambitPrime";
    DestinyActivityModeType[DestinyActivityModeType["Reckoning"] = 76] = "Reckoning";
    DestinyActivityModeType[DestinyActivityModeType["Menagerie"] = 77] = "Menagerie";
    DestinyActivityModeType[DestinyActivityModeType["VexOffensive"] = 78] = "VexOffensive";
    DestinyActivityModeType[DestinyActivityModeType["NightmareHunt"] = 79] = "NightmareHunt";
    DestinyActivityModeType[DestinyActivityModeType["Elimination"] = 80] = "Elimination";
    DestinyActivityModeType[DestinyActivityModeType["Momentum"] = 81] = "Momentum";
})(DestinyActivityModeType = exports.DestinyActivityModeType || (exports.DestinyActivityModeType = {}));
/** Activity Modes are grouped into a few possible broad categories. */
var DestinyActivityModeCategory;
(function (DestinyActivityModeCategory) {
    /** Activities that are neither PVP nor PVE, such as social activities. */
    DestinyActivityModeCategory[DestinyActivityModeCategory["None"] = 0] = "None";
    /** PvE activities, where you shoot aliens in the face. */
    DestinyActivityModeCategory[DestinyActivityModeCategory["PvE"] = 1] = "PvE";
    /** PvP activities, where you shoot your "friends". */
    DestinyActivityModeCategory[DestinyActivityModeCategory["PvP"] = 2] = "PvP";
    /**
     * PVE competitive activities, where you shoot whoever you want whenever you want.
     * Or run around collecting small glowing triangles.
     */
    DestinyActivityModeCategory[DestinyActivityModeCategory["PvECompetitive"] = 3] = "PvECompetitive";
})(DestinyActivityModeCategory = exports.DestinyActivityModeCategory || (exports.DestinyActivityModeCategory = {}));
/**
 * The various known UI styles in which an item can be highlighted. It'll be up to
 * you to determine what you want to show based on this highlighting, BNet doesn't
 * have any assets that correspond to these states. And yeah, RiseOfIron and Comet
 * have their own special highlight states. Don't ask me, I can't imagine they're
 * still used.
 */
var ActivityGraphNodeHighlightType;
(function (ActivityGraphNodeHighlightType) {
    ActivityGraphNodeHighlightType[ActivityGraphNodeHighlightType["None"] = 0] = "None";
    ActivityGraphNodeHighlightType[ActivityGraphNodeHighlightType["Normal"] = 1] = "Normal";
    ActivityGraphNodeHighlightType[ActivityGraphNodeHighlightType["Hyper"] = 2] = "Hyper";
    ActivityGraphNodeHighlightType[ActivityGraphNodeHighlightType["Comet"] = 3] = "Comet";
    ActivityGraphNodeHighlightType[ActivityGraphNodeHighlightType["RiseOfIron"] = 4] = "RiseOfIron";
})(ActivityGraphNodeHighlightType = exports.ActivityGraphNodeHighlightType || (exports.ActivityGraphNodeHighlightType = {}));
/** Represents a potential state of an Activity Graph node. */
var DestinyGraphNodeState;
(function (DestinyGraphNodeState) {
    DestinyGraphNodeState[DestinyGraphNodeState["Hidden"] = 0] = "Hidden";
    DestinyGraphNodeState[DestinyGraphNodeState["Visible"] = 1] = "Visible";
    DestinyGraphNodeState[DestinyGraphNodeState["Teaser"] = 2] = "Teaser";
    DestinyGraphNodeState[DestinyGraphNodeState["Incomplete"] = 3] = "Incomplete";
    DestinyGraphNodeState[DestinyGraphNodeState["Completed"] = 4] = "Completed";
})(DestinyGraphNodeState = exports.DestinyGraphNodeState || (exports.DestinyGraphNodeState = {}));
var BucketScope;
(function (BucketScope) {
    BucketScope[BucketScope["Character"] = 0] = "Character";
    BucketScope[BucketScope["Account"] = 1] = "Account";
})(BucketScope = exports.BucketScope || (exports.BucketScope = {}));
var BucketCategory;
(function (BucketCategory) {
    BucketCategory[BucketCategory["Invisible"] = 0] = "Invisible";
    BucketCategory[BucketCategory["Item"] = 1] = "Item";
    BucketCategory[BucketCategory["Currency"] = 2] = "Currency";
    BucketCategory[BucketCategory["Equippable"] = 3] = "Equippable";
    BucketCategory[BucketCategory["Ignored"] = 4] = "Ignored";
})(BucketCategory = exports.BucketCategory || (exports.BucketCategory = {}));
var ItemLocation;
(function (ItemLocation) {
    ItemLocation[ItemLocation["Unknown"] = 0] = "Unknown";
    ItemLocation[ItemLocation["Inventory"] = 1] = "Inventory";
    ItemLocation[ItemLocation["Vault"] = 2] = "Vault";
    ItemLocation[ItemLocation["Vendor"] = 3] = "Vendor";
    ItemLocation[ItemLocation["Postmaster"] = 4] = "Postmaster";
})(ItemLocation = exports.ItemLocation || (exports.ItemLocation = {}));
/**
 * This Enumeration further classifies items by more specific categorizations than
 * DestinyItemType. The "Sub-Type" is where we classify and categorize items one
 * step further in specificity: "Auto Rifle" instead of just "Weapon" for example,
 * or "Vanguard Bounty" instead of merely "Bounty".
 *
 * These sub-types are provided for historical compatibility with Destiny 1, but an
 * ideal alternative is to use DestinyItemCategoryDefinitions and the
 * DestinyItemDefinition.itemCategories property instead. Item Categories allow for
 * arbitrary hierarchies of specificity, and for items to belong to multiple
 * categories across multiple hierarchies simultaneously. For this enum, we pick a
 * single type as a "best guess" fit.
 *
 * NOTE: This is not all of the item types available, and some of these are
 * holdovers from Destiny 1 that may or may not still exist.
 */
var DestinyItemSubType;
(function (DestinyItemSubType) {
    DestinyItemSubType[DestinyItemSubType["None"] = 0] = "None";
    /** DEPRECATED. Items can be both "Crucible" and something else interesting. */
    DestinyItemSubType[DestinyItemSubType["Crucible"] = 1] = "Crucible";
    /** DEPRECATED. An item can both be "Vanguard" and something else. */
    DestinyItemSubType[DestinyItemSubType["Vanguard"] = 2] = "Vanguard";
    /** DEPRECATED. An item can both be Exotic and something else. */
    DestinyItemSubType[DestinyItemSubType["Exotic"] = 5] = "Exotic";
    DestinyItemSubType[DestinyItemSubType["AutoRifle"] = 6] = "AutoRifle";
    DestinyItemSubType[DestinyItemSubType["Shotgun"] = 7] = "Shotgun";
    DestinyItemSubType[DestinyItemSubType["Machinegun"] = 8] = "Machinegun";
    DestinyItemSubType[DestinyItemSubType["HandCannon"] = 9] = "HandCannon";
    DestinyItemSubType[DestinyItemSubType["RocketLauncher"] = 10] = "RocketLauncher";
    DestinyItemSubType[DestinyItemSubType["FusionRifle"] = 11] = "FusionRifle";
    DestinyItemSubType[DestinyItemSubType["SniperRifle"] = 12] = "SniperRifle";
    DestinyItemSubType[DestinyItemSubType["PulseRifle"] = 13] = "PulseRifle";
    DestinyItemSubType[DestinyItemSubType["ScoutRifle"] = 14] = "ScoutRifle";
    /** DEPRECATED. An item can both be CRM and something else. */
    DestinyItemSubType[DestinyItemSubType["Crm"] = 16] = "Crm";
    DestinyItemSubType[DestinyItemSubType["Sidearm"] = 17] = "Sidearm";
    DestinyItemSubType[DestinyItemSubType["Sword"] = 18] = "Sword";
    DestinyItemSubType[DestinyItemSubType["Mask"] = 19] = "Mask";
    DestinyItemSubType[DestinyItemSubType["Shader"] = 20] = "Shader";
    DestinyItemSubType[DestinyItemSubType["Ornament"] = 21] = "Ornament";
    DestinyItemSubType[DestinyItemSubType["FusionRifleLine"] = 22] = "FusionRifleLine";
    DestinyItemSubType[DestinyItemSubType["GrenadeLauncher"] = 23] = "GrenadeLauncher";
    DestinyItemSubType[DestinyItemSubType["SubmachineGun"] = 24] = "SubmachineGun";
    DestinyItemSubType[DestinyItemSubType["TraceRifle"] = 25] = "TraceRifle";
    DestinyItemSubType[DestinyItemSubType["HelmetArmor"] = 26] = "HelmetArmor";
    DestinyItemSubType[DestinyItemSubType["GauntletsArmor"] = 27] = "GauntletsArmor";
    DestinyItemSubType[DestinyItemSubType["ChestArmor"] = 28] = "ChestArmor";
    DestinyItemSubType[DestinyItemSubType["LegArmor"] = 29] = "LegArmor";
    DestinyItemSubType[DestinyItemSubType["ClassArmor"] = 30] = "ClassArmor";
    DestinyItemSubType[DestinyItemSubType["Bow"] = 31] = "Bow";
})(DestinyItemSubType = exports.DestinyItemSubType || (exports.DestinyItemSubType = {}));
/** Display categories can have custom sort orders. These are the possible options. */
var VendorDisplayCategorySortOrder;
(function (VendorDisplayCategorySortOrder) {
    VendorDisplayCategorySortOrder[VendorDisplayCategorySortOrder["Default"] = 0] = "Default";
    VendorDisplayCategorySortOrder[VendorDisplayCategorySortOrder["SortByTier"] = 1] = "SortByTier";
})(VendorDisplayCategorySortOrder = exports.VendorDisplayCategorySortOrder || (exports.VendorDisplayCategorySortOrder = {}));
/**
 * When a Vendor Interaction provides rewards, they'll either let you choose one or
 * let you have all of them. This determines which it will be.
 */
var DestinyVendorInteractionRewardSelection;
(function (DestinyVendorInteractionRewardSelection) {
    DestinyVendorInteractionRewardSelection[DestinyVendorInteractionRewardSelection["None"] = 0] = "None";
    DestinyVendorInteractionRewardSelection[DestinyVendorInteractionRewardSelection["One"] = 1] = "One";
    DestinyVendorInteractionRewardSelection[DestinyVendorInteractionRewardSelection["All"] = 2] = "All";
})(DestinyVendorInteractionRewardSelection = exports.DestinyVendorInteractionRewardSelection || (exports.DestinyVendorInteractionRewardSelection = {}));
/** This determines the type of reply that a Vendor will have during an Interaction. */
var DestinyVendorReplyType;
(function (DestinyVendorReplyType) {
    DestinyVendorReplyType[DestinyVendorReplyType["Accept"] = 0] = "Accept";
    DestinyVendorReplyType[DestinyVendorReplyType["Decline"] = 1] = "Decline";
    DestinyVendorReplyType[DestinyVendorReplyType["Complete"] = 2] = "Complete";
})(DestinyVendorReplyType = exports.DestinyVendorReplyType || (exports.DestinyVendorReplyType = {}));
/** An enumeration of the known UI interactions for Vendors. */
var VendorInteractionType;
(function (VendorInteractionType) {
    VendorInteractionType[VendorInteractionType["Unknown"] = 0] = "Unknown";
    /** An empty interaction. If this ends up in content, it is probably a game bug. */
    VendorInteractionType[VendorInteractionType["Undefined"] = 1] = "Undefined";
    /** An interaction shown when you complete a quest and receive a reward. */
    VendorInteractionType[VendorInteractionType["QuestComplete"] = 2] = "QuestComplete";
    /**
     * An interaction shown when you talk to a Vendor as an intermediary step of a
     * quest.
     */
    VendorInteractionType[VendorInteractionType["QuestContinue"] = 3] = "QuestContinue";
    /** An interaction shown when you are previewing the vendor's reputation rewards. */
    VendorInteractionType[VendorInteractionType["ReputationPreview"] = 4] = "ReputationPreview";
    /** An interaction shown when you rank up with the vendor. */
    VendorInteractionType[VendorInteractionType["RankUpReward"] = 5] = "RankUpReward";
    /** An interaction shown when you have tokens to turn in for the vendor. */
    VendorInteractionType[VendorInteractionType["TokenTurnIn"] = 6] = "TokenTurnIn";
    /** An interaction shown when you're accepting a new quest. */
    VendorInteractionType[VendorInteractionType["QuestAccept"] = 7] = "QuestAccept";
    /**
     * Honestly, this doesn't seem consistent to me. It is used to give you choices in
     * the Cryptarch as well as some reward prompts by the Eververse vendor. I'll have
     * to look into that further at some point.
     */
    VendorInteractionType[VendorInteractionType["ProgressTab"] = 8] = "ProgressTab";
    /** These seem even less consistent. I don't know what these are. */
    VendorInteractionType[VendorInteractionType["End"] = 9] = "End";
    /** Also seem inconsistent. I also don't know what these are offhand. */
    VendorInteractionType[VendorInteractionType["Start"] = 10] = "Start";
})(VendorInteractionType = exports.VendorInteractionType || (exports.VendorInteractionType = {}));
/** Determines how items are sorted in an inventory bucket. */
var DestinyItemSortType;
(function (DestinyItemSortType) {
    DestinyItemSortType[DestinyItemSortType["ItemId"] = 0] = "ItemId";
    DestinyItemSortType[DestinyItemSortType["Timestamp"] = 1] = "Timestamp";
    DestinyItemSortType[DestinyItemSortType["StackSize"] = 2] = "StackSize";
})(DestinyItemSortType = exports.DestinyItemSortType || (exports.DestinyItemSortType = {}));
/** The action that happens when the user attempts to refund an item. */
var DestinyVendorItemRefundPolicy;
(function (DestinyVendorItemRefundPolicy) {
    DestinyVendorItemRefundPolicy[DestinyVendorItemRefundPolicy["NotRefundable"] = 0] = "NotRefundable";
    DestinyVendorItemRefundPolicy[DestinyVendorItemRefundPolicy["DeletesItem"] = 1] = "DeletesItem";
    DestinyVendorItemRefundPolicy[DestinyVendorItemRefundPolicy["RevokesLicense"] = 2] = "RevokesLicense";
})(DestinyVendorItemRefundPolicy = exports.DestinyVendorItemRefundPolicy || (exports.DestinyVendorItemRefundPolicy = {}));
/** Indicates the type of actions that can be performed */
var SocketTypeActionType;
(function (SocketTypeActionType) {
    SocketTypeActionType[SocketTypeActionType["InsertPlug"] = 0] = "InsertPlug";
    SocketTypeActionType[SocketTypeActionType["InfuseItem"] = 1] = "InfuseItem";
    SocketTypeActionType[SocketTypeActionType["ReinitializeSocket"] = 2] = "ReinitializeSocket";
})(SocketTypeActionType = exports.SocketTypeActionType || (exports.SocketTypeActionType = {}));
/**
 * Represents the possible and known UI styles used by the game for rendering
 * Socket Categories.
 */
var DestinySocketCategoryStyle;
(function (DestinySocketCategoryStyle) {
    DestinySocketCategoryStyle[DestinySocketCategoryStyle["Unknown"] = 0] = "Unknown";
    DestinySocketCategoryStyle[DestinySocketCategoryStyle["Reusable"] = 1] = "Reusable";
    DestinySocketCategoryStyle[DestinySocketCategoryStyle["Consumable"] = 2] = "Consumable";
    DestinySocketCategoryStyle[DestinySocketCategoryStyle["Unlockable"] = 3] = "Unlockable";
    DestinySocketCategoryStyle[DestinySocketCategoryStyle["Intrinsic"] = 4] = "Intrinsic";
    DestinySocketCategoryStyle[DestinySocketCategoryStyle["EnergyMeter"] = 5] = "EnergyMeter";
    DestinySocketCategoryStyle[DestinySocketCategoryStyle["LargePerk"] = 6] = "LargePerk";
})(DestinySocketCategoryStyle = exports.DestinySocketCategoryStyle || (exports.DestinySocketCategoryStyle = {}));
var DestinySocketVisibility;
(function (DestinySocketVisibility) {
    DestinySocketVisibility[DestinySocketVisibility["Visible"] = 0] = "Visible";
    DestinySocketVisibility[DestinySocketVisibility["Hidden"] = 1] = "Hidden";
    DestinySocketVisibility[DestinySocketVisibility["HiddenWhenEmpty"] = 2] = "HiddenWhenEmpty";
    DestinySocketVisibility[DestinySocketVisibility["HiddenIfNoPlugsAvailable"] = 3] = "HiddenIfNoPlugsAvailable";
})(DestinySocketVisibility = exports.DestinySocketVisibility || (exports.DestinySocketVisibility = {}));
var DestinyActivityNavPointType;
(function (DestinyActivityNavPointType) {
    DestinyActivityNavPointType[DestinyActivityNavPointType["Inactive"] = 0] = "Inactive";
    DestinyActivityNavPointType[DestinyActivityNavPointType["PrimaryObjective"] = 1] = "PrimaryObjective";
    DestinyActivityNavPointType[DestinyActivityNavPointType["SecondaryObjective"] = 2] = "SecondaryObjective";
    DestinyActivityNavPointType[DestinyActivityNavPointType["TravelObjective"] = 3] = "TravelObjective";
    DestinyActivityNavPointType[DestinyActivityNavPointType["PublicEventObjective"] = 4] = "PublicEventObjective";
    DestinyActivityNavPointType[DestinyActivityNavPointType["AmmoCache"] = 5] = "AmmoCache";
    DestinyActivityNavPointType[DestinyActivityNavPointType["PointTypeFlag"] = 6] = "PointTypeFlag";
    DestinyActivityNavPointType[DestinyActivityNavPointType["CapturePoint"] = 7] = "CapturePoint";
    DestinyActivityNavPointType[DestinyActivityNavPointType["DefensiveEncounter"] = 8] = "DefensiveEncounter";
    DestinyActivityNavPointType[DestinyActivityNavPointType["GhostInteraction"] = 9] = "GhostInteraction";
    DestinyActivityNavPointType[DestinyActivityNavPointType["KillAi"] = 10] = "KillAi";
    DestinyActivityNavPointType[DestinyActivityNavPointType["QuestItem"] = 11] = "QuestItem";
    DestinyActivityNavPointType[DestinyActivityNavPointType["PatrolMission"] = 12] = "PatrolMission";
    DestinyActivityNavPointType[DestinyActivityNavPointType["Incoming"] = 13] = "Incoming";
    DestinyActivityNavPointType[DestinyActivityNavPointType["ArenaObjective"] = 14] = "ArenaObjective";
    DestinyActivityNavPointType[DestinyActivityNavPointType["AutomationHint"] = 15] = "AutomationHint";
    DestinyActivityNavPointType[DestinyActivityNavPointType["TrackedQuest"] = 16] = "TrackedQuest";
})(DestinyActivityNavPointType = exports.DestinyActivityNavPointType || (exports.DestinyActivityNavPointType = {}));
/**
 * If you're showing an unlock value in the UI, this is the format in which it
 * should be shown. You'll have to build your own algorithms on the client side to
 * determine how best to render these options.
 */
var DestinyUnlockValueUIStyle;
(function (DestinyUnlockValueUIStyle) {
    /** Generally, Automatic means "Just show the number" */
    DestinyUnlockValueUIStyle[DestinyUnlockValueUIStyle["Automatic"] = 0] = "Automatic";
    /**
     * Show the number as a fractional value. For this to make sense, the value being
     * displayed should have a comparable upper bound, like the progress to the next
     * level of a Progression.
     */
    DestinyUnlockValueUIStyle[DestinyUnlockValueUIStyle["Fraction"] = 1] = "Fraction";
    /**
     * Show the number as a checkbox. 0 Will mean unchecked, any other value will mean
     * checked.
     */
    DestinyUnlockValueUIStyle[DestinyUnlockValueUIStyle["Checkbox"] = 2] = "Checkbox";
    /**
     * Show the number as a percentage. For this to make sense, the value being
     * displayed should have a comparable upper bound, like the progress to the next
     * level of a Progression.
     */
    DestinyUnlockValueUIStyle[DestinyUnlockValueUIStyle["Percentage"] = 3] = "Percentage";
    /**
     * Show the number as a date and time. The number will be the number of seconds
     * since the Unix Epoch (January 1st, 1970 at midnight UTC). It'll be up to you to
     * convert this into a date and time format understandable to the user in their
     * time zone.
     */
    DestinyUnlockValueUIStyle[DestinyUnlockValueUIStyle["DateTime"] = 4] = "DateTime";
    /**
     * Show the number as a floating point value that represents a fraction, where 0 is
     * min and 1 is max. For this to make sense, the value being displayed should have
     * a comparable upper bound, like the progress to the next level of a Progression.
     */
    DestinyUnlockValueUIStyle[DestinyUnlockValueUIStyle["FractionFloat"] = 5] = "FractionFloat";
    /** Show the number as a straight-up integer. */
    DestinyUnlockValueUIStyle[DestinyUnlockValueUIStyle["Integer"] = 6] = "Integer";
    /** Show the number as a time duration. The value will be returned as seconds. */
    DestinyUnlockValueUIStyle[DestinyUnlockValueUIStyle["TimeDuration"] = 7] = "TimeDuration";
    /**
     * Don't bother showing the value at all, it's not easily human-interpretable, and
     * used for some internal purpose.
     */
    DestinyUnlockValueUIStyle[DestinyUnlockValueUIStyle["Hidden"] = 8] = "Hidden";
    DestinyUnlockValueUIStyle[DestinyUnlockValueUIStyle["Multiplier"] = 9] = "Multiplier";
})(DestinyUnlockValueUIStyle = exports.DestinyUnlockValueUIStyle || (exports.DestinyUnlockValueUIStyle = {}));
var DamageType;
(function (DamageType) {
    DamageType[DamageType["None"] = 0] = "None";
    DamageType[DamageType["Kinetic"] = 1] = "Kinetic";
    DamageType[DamageType["Arc"] = 2] = "Arc";
    DamageType[DamageType["Thermal"] = 3] = "Thermal";
    DamageType[DamageType["Void"] = 4] = "Void";
    DamageType[DamageType["Raid"] = 5] = "Raid";
})(DamageType = exports.DamageType || (exports.DamageType = {}));
/**
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyTalentNodeStepWeaponPerformances;
(function (DestinyTalentNodeStepWeaponPerformances) {
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["None"] = 0] = "None";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["RateOfFire"] = 1] = "RateOfFire";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["Damage"] = 2] = "Damage";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["Accuracy"] = 4] = "Accuracy";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["Range"] = 8] = "Range";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["Zoom"] = 16] = "Zoom";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["Recoil"] = 32] = "Recoil";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["Ready"] = 64] = "Ready";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["Reload"] = 128] = "Reload";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["HairTrigger"] = 256] = "HairTrigger";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["AmmoAndMagazine"] = 512] = "AmmoAndMagazine";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["TrackingAndDetonation"] = 1024] = "TrackingAndDetonation";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["ShotgunSpread"] = 2048] = "ShotgunSpread";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["ChargeTime"] = 4096] = "ChargeTime";
    DestinyTalentNodeStepWeaponPerformances[DestinyTalentNodeStepWeaponPerformances["All"] = 8191] = "All";
})(DestinyTalentNodeStepWeaponPerformances = exports.DestinyTalentNodeStepWeaponPerformances || (exports.DestinyTalentNodeStepWeaponPerformances = {}));
/**
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyTalentNodeStepImpactEffects;
(function (DestinyTalentNodeStepImpactEffects) {
    DestinyTalentNodeStepImpactEffects[DestinyTalentNodeStepImpactEffects["None"] = 0] = "None";
    DestinyTalentNodeStepImpactEffects[DestinyTalentNodeStepImpactEffects["ArmorPiercing"] = 1] = "ArmorPiercing";
    DestinyTalentNodeStepImpactEffects[DestinyTalentNodeStepImpactEffects["Ricochet"] = 2] = "Ricochet";
    DestinyTalentNodeStepImpactEffects[DestinyTalentNodeStepImpactEffects["Flinch"] = 4] = "Flinch";
    DestinyTalentNodeStepImpactEffects[DestinyTalentNodeStepImpactEffects["CollateralDamage"] = 8] = "CollateralDamage";
    DestinyTalentNodeStepImpactEffects[DestinyTalentNodeStepImpactEffects["Disorient"] = 16] = "Disorient";
    DestinyTalentNodeStepImpactEffects[DestinyTalentNodeStepImpactEffects["HighlightTarget"] = 32] = "HighlightTarget";
    DestinyTalentNodeStepImpactEffects[DestinyTalentNodeStepImpactEffects["All"] = 63] = "All";
})(DestinyTalentNodeStepImpactEffects = exports.DestinyTalentNodeStepImpactEffects || (exports.DestinyTalentNodeStepImpactEffects = {}));
/**
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyTalentNodeStepGuardianAttributes;
(function (DestinyTalentNodeStepGuardianAttributes) {
    DestinyTalentNodeStepGuardianAttributes[DestinyTalentNodeStepGuardianAttributes["None"] = 0] = "None";
    DestinyTalentNodeStepGuardianAttributes[DestinyTalentNodeStepGuardianAttributes["Stats"] = 1] = "Stats";
    DestinyTalentNodeStepGuardianAttributes[DestinyTalentNodeStepGuardianAttributes["Shields"] = 2] = "Shields";
    DestinyTalentNodeStepGuardianAttributes[DestinyTalentNodeStepGuardianAttributes["Health"] = 4] = "Health";
    DestinyTalentNodeStepGuardianAttributes[DestinyTalentNodeStepGuardianAttributes["Revive"] = 8] = "Revive";
    DestinyTalentNodeStepGuardianAttributes[DestinyTalentNodeStepGuardianAttributes["AimUnderFire"] = 16] = "AimUnderFire";
    DestinyTalentNodeStepGuardianAttributes[DestinyTalentNodeStepGuardianAttributes["Radar"] = 32] = "Radar";
    DestinyTalentNodeStepGuardianAttributes[DestinyTalentNodeStepGuardianAttributes["Invisibility"] = 64] = "Invisibility";
    DestinyTalentNodeStepGuardianAttributes[DestinyTalentNodeStepGuardianAttributes["Reputations"] = 128] = "Reputations";
    DestinyTalentNodeStepGuardianAttributes[DestinyTalentNodeStepGuardianAttributes["All"] = 255] = "All";
})(DestinyTalentNodeStepGuardianAttributes = exports.DestinyTalentNodeStepGuardianAttributes || (exports.DestinyTalentNodeStepGuardianAttributes = {}));
/**
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyTalentNodeStepLightAbilities;
(function (DestinyTalentNodeStepLightAbilities) {
    DestinyTalentNodeStepLightAbilities[DestinyTalentNodeStepLightAbilities["None"] = 0] = "None";
    DestinyTalentNodeStepLightAbilities[DestinyTalentNodeStepLightAbilities["Grenades"] = 1] = "Grenades";
    DestinyTalentNodeStepLightAbilities[DestinyTalentNodeStepLightAbilities["Melee"] = 2] = "Melee";
    DestinyTalentNodeStepLightAbilities[DestinyTalentNodeStepLightAbilities["MovementModes"] = 4] = "MovementModes";
    DestinyTalentNodeStepLightAbilities[DestinyTalentNodeStepLightAbilities["Orbs"] = 8] = "Orbs";
    DestinyTalentNodeStepLightAbilities[DestinyTalentNodeStepLightAbilities["SuperEnergy"] = 16] = "SuperEnergy";
    DestinyTalentNodeStepLightAbilities[DestinyTalentNodeStepLightAbilities["SuperMods"] = 32] = "SuperMods";
    DestinyTalentNodeStepLightAbilities[DestinyTalentNodeStepLightAbilities["All"] = 63] = "All";
})(DestinyTalentNodeStepLightAbilities = exports.DestinyTalentNodeStepLightAbilities || (exports.DestinyTalentNodeStepLightAbilities = {}));
/**
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyTalentNodeStepDamageTypes;
(function (DestinyTalentNodeStepDamageTypes) {
    DestinyTalentNodeStepDamageTypes[DestinyTalentNodeStepDamageTypes["None"] = 0] = "None";
    DestinyTalentNodeStepDamageTypes[DestinyTalentNodeStepDamageTypes["Kinetic"] = 1] = "Kinetic";
    DestinyTalentNodeStepDamageTypes[DestinyTalentNodeStepDamageTypes["Arc"] = 2] = "Arc";
    DestinyTalentNodeStepDamageTypes[DestinyTalentNodeStepDamageTypes["Solar"] = 4] = "Solar";
    DestinyTalentNodeStepDamageTypes[DestinyTalentNodeStepDamageTypes["Void"] = 8] = "Void";
    DestinyTalentNodeStepDamageTypes[DestinyTalentNodeStepDamageTypes["All"] = 15] = "All";
})(DestinyTalentNodeStepDamageTypes = exports.DestinyTalentNodeStepDamageTypes || (exports.DestinyTalentNodeStepDamageTypes = {}));
/**
 * Some Objectives provide perks, generally as part of providing some kind of
 * interesting modifier for a Challenge or Quest. This indicates when the Perk is
 * granted.
 */
var DestinyObjectiveGrantStyle;
(function (DestinyObjectiveGrantStyle) {
    DestinyObjectiveGrantStyle[DestinyObjectiveGrantStyle["WhenIncomplete"] = 0] = "WhenIncomplete";
    DestinyObjectiveGrantStyle[DestinyObjectiveGrantStyle["WhenComplete"] = 1] = "WhenComplete";
    DestinyObjectiveGrantStyle[DestinyObjectiveGrantStyle["Always"] = 2] = "Always";
})(DestinyObjectiveGrantStyle = exports.DestinyObjectiveGrantStyle || (exports.DestinyObjectiveGrantStyle = {}));
/**
 * When a Stat (DestinyStatDefinition) is aggregated, this is the rules used for
 * determining the level and formula used for aggregation.
 *
 * * CharacterAverage = apply a weighted average using the related
 * DestinyStatGroupDefinition on the DestinyInventoryItemDefinition across the
 * character's equipped items. See both of those definitions for details. *
 * Character = don't aggregate: the stat should be located and used directly on the
 * character. * Item = don't aggregate: the stat should be located and used
 * directly on the item.
 */
var DestinyStatAggregationType;
(function (DestinyStatAggregationType) {
    DestinyStatAggregationType[DestinyStatAggregationType["CharacterAverage"] = 0] = "CharacterAverage";
    DestinyStatAggregationType[DestinyStatAggregationType["Character"] = 1] = "Character";
    DestinyStatAggregationType[DestinyStatAggregationType["Item"] = 2] = "Item";
})(DestinyStatAggregationType = exports.DestinyStatAggregationType || (exports.DestinyStatAggregationType = {}));
/** At last, stats have categories. Use this for whatever purpose you might wish. */
var DestinyStatCategory;
(function (DestinyStatCategory) {
    DestinyStatCategory[DestinyStatCategory["Gameplay"] = 0] = "Gameplay";
    DestinyStatCategory[DestinyStatCategory["Weapon"] = 1] = "Weapon";
    DestinyStatCategory[DestinyStatCategory["Defense"] = 2] = "Defense";
    DestinyStatCategory[DestinyStatCategory["Primary"] = 3] = "Primary";
})(DestinyStatCategory = exports.DestinyStatCategory || (exports.DestinyStatCategory = {}));
var DestinyRecordValueStyle;
(function (DestinyRecordValueStyle) {
    DestinyRecordValueStyle[DestinyRecordValueStyle["Integer"] = 0] = "Integer";
    DestinyRecordValueStyle[DestinyRecordValueStyle["Percentage"] = 1] = "Percentage";
    DestinyRecordValueStyle[DestinyRecordValueStyle["Milliseconds"] = 2] = "Milliseconds";
    DestinyRecordValueStyle[DestinyRecordValueStyle["Boolean"] = 3] = "Boolean";
    DestinyRecordValueStyle[DestinyRecordValueStyle["Decimal"] = 4] = "Decimal";
})(DestinyRecordValueStyle = exports.DestinyRecordValueStyle || (exports.DestinyRecordValueStyle = {}));
var DestinyGender;
(function (DestinyGender) {
    DestinyGender[DestinyGender["Male"] = 0] = "Male";
    DestinyGender[DestinyGender["Female"] = 1] = "Female";
    DestinyGender[DestinyGender["Unknown"] = 2] = "Unknown";
})(DestinyGender = exports.DestinyGender || (exports.DestinyGender = {}));
var DestinyRecordToastStyle;
(function (DestinyRecordToastStyle) {
    DestinyRecordToastStyle[DestinyRecordToastStyle["None"] = 0] = "None";
    DestinyRecordToastStyle[DestinyRecordToastStyle["Record"] = 1] = "Record";
    DestinyRecordToastStyle[DestinyRecordToastStyle["Lore"] = 2] = "Lore";
    DestinyRecordToastStyle[DestinyRecordToastStyle["Badge"] = 3] = "Badge";
    DestinyRecordToastStyle[DestinyRecordToastStyle["MetaRecord"] = 4] = "MetaRecord";
    DestinyRecordToastStyle[DestinyRecordToastStyle["MedalComplete"] = 5] = "MedalComplete";
})(DestinyRecordToastStyle = exports.DestinyRecordToastStyle || (exports.DestinyRecordToastStyle = {}));
/**
 * A hint for how the presentation node should be displayed when shown in a list.
 * How you use this is your UI is up to you.
 */
var DestinyPresentationDisplayStyle;
(function (DestinyPresentationDisplayStyle) {
    /** Display the item as a category, through which sub-items are filtered. */
    DestinyPresentationDisplayStyle[DestinyPresentationDisplayStyle["Category"] = 0] = "Category";
    DestinyPresentationDisplayStyle[DestinyPresentationDisplayStyle["Badge"] = 1] = "Badge";
    DestinyPresentationDisplayStyle[DestinyPresentationDisplayStyle["Medals"] = 2] = "Medals";
    DestinyPresentationDisplayStyle[DestinyPresentationDisplayStyle["Collectible"] = 3] = "Collectible";
    DestinyPresentationDisplayStyle[DestinyPresentationDisplayStyle["Record"] = 4] = "Record";
})(DestinyPresentationDisplayStyle = exports.DestinyPresentationDisplayStyle || (exports.DestinyPresentationDisplayStyle = {}));
/**
 * A hint for what screen should be shown when this presentation node is clicked
 * into. How you use this is your UI is up to you.
 */
var DestinyPresentationScreenStyle;
(function (DestinyPresentationScreenStyle) {
    /** Use the "default" view for the presentation nodes. */
    DestinyPresentationScreenStyle[DestinyPresentationScreenStyle["Default"] = 0] = "Default";
    /**
     * Show sub-items as "category sets". In-game, you'd see these as a vertical list
     * of child presentation nodes - armor sets for example - and the icons of items
     * within those sets displayed horizontally.
     */
    DestinyPresentationScreenStyle[DestinyPresentationScreenStyle["CategorySets"] = 1] = "CategorySets";
    /**
     * Show sub-items as Badges. (I know, I know. We don't need no stinkin' badges har
     * har har)
     */
    DestinyPresentationScreenStyle[DestinyPresentationScreenStyle["Badge"] = 2] = "Badge";
})(DestinyPresentationScreenStyle = exports.DestinyPresentationScreenStyle || (exports.DestinyPresentationScreenStyle = {}));
var TierType;
(function (TierType) {
    TierType[TierType["Unknown"] = 0] = "Unknown";
    TierType[TierType["Currency"] = 1] = "Currency";
    TierType[TierType["Basic"] = 2] = "Basic";
    TierType[TierType["Common"] = 3] = "Common";
    TierType[TierType["Rare"] = 4] = "Rare";
    TierType[TierType["Superior"] = 5] = "Superior";
    TierType[TierType["Exotic"] = 6] = "Exotic";
})(TierType = exports.TierType || (exports.TierType = {}));
/**
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var EquippingItemBlockAttributes;
(function (EquippingItemBlockAttributes) {
    EquippingItemBlockAttributes[EquippingItemBlockAttributes["None"] = 0] = "None";
    EquippingItemBlockAttributes[EquippingItemBlockAttributes["EquipOnAcquire"] = 1] = "EquipOnAcquire";
})(EquippingItemBlockAttributes = exports.EquippingItemBlockAttributes || (exports.EquippingItemBlockAttributes = {}));
var DestinyAmmunitionType;
(function (DestinyAmmunitionType) {
    DestinyAmmunitionType[DestinyAmmunitionType["None"] = 0] = "None";
    DestinyAmmunitionType[DestinyAmmunitionType["Primary"] = 1] = "Primary";
    DestinyAmmunitionType[DestinyAmmunitionType["Special"] = 2] = "Special";
    DestinyAmmunitionType[DestinyAmmunitionType["Heavy"] = 3] = "Heavy";
    DestinyAmmunitionType[DestinyAmmunitionType["Unknown"] = 4] = "Unknown";
})(DestinyAmmunitionType = exports.DestinyAmmunitionType || (exports.DestinyAmmunitionType = {}));
/**
 * BNet's custom categorization of reward sources. We took a look at the existing
 * ways that items could be spawned, and tried to make high-level categorizations
 * of them. This needs to be re-evaluated for Destiny 2.
 */
var DestinyRewardSourceCategory;
(function (DestinyRewardSourceCategory) {
    /** The source doesn't fit well into any of the other types. */
    DestinyRewardSourceCategory[DestinyRewardSourceCategory["None"] = 0] = "None";
    /**
     * The source is directly related to the rewards gained by playing an activity or
     * set of activities. This currently includes Quests and other action in-game.
     */
    DestinyRewardSourceCategory[DestinyRewardSourceCategory["Activity"] = 1] = "Activity";
    /** This source is directly related to items that Vendors sell. */
    DestinyRewardSourceCategory[DestinyRewardSourceCategory["Vendor"] = 2] = "Vendor";
    /**
     * This source is a custom aggregation of items that can be earned in many ways,
     * but that share some other property in common that is useful to share. For
     * instance, in Destiny 1 we would make "Reward Sources" for every game expansion:
     * that way, you could search reward sources to see what items became available
     * with any given Expansion.
     */
    DestinyRewardSourceCategory[DestinyRewardSourceCategory["Aggregate"] = 3] = "Aggregate";
})(DestinyRewardSourceCategory = exports.DestinyRewardSourceCategory || (exports.DestinyRewardSourceCategory = {}));
/**
 * If the plug has a specific custom style, this enumeration will represent that
 * style/those styles.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var PlugUiStyles;
(function (PlugUiStyles) {
    PlugUiStyles[PlugUiStyles["None"] = 0] = "None";
    PlugUiStyles[PlugUiStyles["Masterwork"] = 1] = "Masterwork";
})(PlugUiStyles = exports.PlugUiStyles || (exports.PlugUiStyles = {}));
/**
 * This enum determines whether the plug is available to be inserted.
 *
 * - Normal means that all existing rules for plug insertion apply.
 *
 * - UnavailableIfSocketContainsMatchingPlugCategory means that the plug is only
 * available if the socket does NOT match the plug category.
 *
 * - AvailableIfSocketContainsMatchingPlugCategory means that the plug is only
 * available if the socket DOES match the plug category.
 *
 * For category matching, use the plug's "plugCategoryIdentifier" property,
 * comparing it to
 */
var PlugAvailabilityMode;
(function (PlugAvailabilityMode) {
    PlugAvailabilityMode[PlugAvailabilityMode["Normal"] = 0] = "Normal";
    PlugAvailabilityMode[PlugAvailabilityMode["UnavailableIfSocketContainsMatchingPlugCategory"] = 1] = "UnavailableIfSocketContainsMatchingPlugCategory";
    PlugAvailabilityMode[PlugAvailabilityMode["AvailableIfSocketContainsMatchingPlugCategory"] = 2] = "AvailableIfSocketContainsMatchingPlugCategory";
})(PlugAvailabilityMode = exports.PlugAvailabilityMode || (exports.PlugAvailabilityMode = {}));
/**
 * Represents an Energy Type for systems that require payment of energy of certain
 * types, such as with Armor 2.0.
 */
var DestinyEnergyType;
(function (DestinyEnergyType) {
    DestinyEnergyType[DestinyEnergyType["Any"] = 0] = "Any";
    DestinyEnergyType[DestinyEnergyType["Arc"] = 1] = "Arc";
    DestinyEnergyType[DestinyEnergyType["Thermal"] = 2] = "Thermal";
    DestinyEnergyType[DestinyEnergyType["Void"] = 3] = "Void";
})(DestinyEnergyType = exports.DestinyEnergyType || (exports.DestinyEnergyType = {}));
/**
 * Indicates how a socket is populated, and where you should look for valid plug
 * data.
 *
 * This is a flags enumeration/bitmask field, as you may have to look in multiple
 * sources across multiple components for valid plugs.
 *
 * For instance, a socket could have plugs that are sourced from its own
 * definition, as well as plugs that are sourced from Character-scoped AND profile-
 * scoped Plug Sets. Only by combining plug data for every indicated source will
 * you be able to know all of the plugs available for a socket.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var SocketPlugSources;
(function (SocketPlugSources) {
    /** If there's no way we can detect to insert new plugs. */
    SocketPlugSources[SocketPlugSources["None"] = 0] = "None";
    /**
     * Use plugs found in the player's inventory, based on the socket type rules (see
     * DestinySocketTypeDefinition for more info)
     *
     * Note that a socket - like Shaders - can have *both* reusable plugs and inventory
     * items inserted theoretically.
     */
    SocketPlugSources[SocketPlugSources["InventorySourced"] = 1] = "InventorySourced";
    /**
     * Use the DestinyItemSocketsComponent.sockets.reusablePlugs property to determine
     * which plugs are valid for this socket. This may have to be combined with other
     * sources, such as plug sets, if those flags are set.
     *
     * Note that "Reusable" plugs may not necessarily come from a plug set, nor from
     * the "reusablePlugItems" in the socket's Definition data. They can sometimes be "
     * randomized" in which case the only source of truth at the moment is still the
     * runtime DestinyItemSocketsComponent.sockets.reusablePlugs property.
     */
    SocketPlugSources[SocketPlugSources["ReusablePlugItems"] = 2] = "ReusablePlugItems";
    /**
     * Use the ProfilePlugSets (DestinyProfileResponse.profilePlugSets) component data
     * to determine which plugs are valid for this socket.
     */
    SocketPlugSources[SocketPlugSources["ProfilePlugSet"] = 4] = "ProfilePlugSet";
    /**
     * Use the CharacterPlugSets (DestinyProfileResponse.characterPlugSets) component
     * data to determine which plugs are valid for this socket.
     */
    SocketPlugSources[SocketPlugSources["CharacterPlugSet"] = 8] = "CharacterPlugSet";
})(SocketPlugSources = exports.SocketPlugSources || (exports.SocketPlugSources = {}));
/**
 * Indicates how a perk should be shown, or if it should be, in the game UI. Maybe
 * useful for those of you trying to filter out internal-use-only perks (or for
 * those of you trying to figure out what they do!)
 */
var ItemPerkVisibility;
(function (ItemPerkVisibility) {
    ItemPerkVisibility[ItemPerkVisibility["Visible"] = 0] = "Visible";
    ItemPerkVisibility[ItemPerkVisibility["Disabled"] = 1] = "Disabled";
    ItemPerkVisibility[ItemPerkVisibility["Hidden"] = 2] = "Hidden";
})(ItemPerkVisibility = exports.ItemPerkVisibility || (exports.ItemPerkVisibility = {}));
/**
 * A plug can optionally have a "Breaker Type": a special ability that can affect
 * units in unique ways. Activating this plug can grant one of these types.
 */
var DestinyBreakerType;
(function (DestinyBreakerType) {
    DestinyBreakerType[DestinyBreakerType["None"] = 0] = "None";
    DestinyBreakerType[DestinyBreakerType["ShieldPiercing"] = 1] = "ShieldPiercing";
    DestinyBreakerType[DestinyBreakerType["Disruption"] = 2] = "Disruption";
    DestinyBreakerType[DestinyBreakerType["Stagger"] = 3] = "Stagger";
})(DestinyBreakerType = exports.DestinyBreakerType || (exports.DestinyBreakerType = {}));
/**
 * An enumeration that indicates the high-level "type" of the item, attempting to
 * iron out the context specific differences for specific instances of an entity.
 * For instance, though a weapon may be of various weapon "Types", in
 * DestinyItemType they are all classified as "Weapon". This allows for better
 * filtering on a higher level of abstraction for the concept of types.
 *
 * This enum is provided for historical compatibility with Destiny 1, but an ideal
 * alternative is to use DestinyItemCategoryDefinitions and the
 * DestinyItemDefinition.itemCategories property instead. Item Categories allow for
 * arbitrary hierarchies of specificity, and for items to belong to multiple
 * categories across multiple hierarchies simultaneously. For this enum, we pick a
 * single type as a "best guess" fit.
 *
 * NOTE: This is not all of the item types available, and some of these are
 * holdovers from Destiny 1 that may or may not still exist.
 *
 * I keep updating these because they're so damn convenient. I guess I shouldn't
 * fight it.
 */
var DestinyItemType;
(function (DestinyItemType) {
    DestinyItemType[DestinyItemType["None"] = 0] = "None";
    DestinyItemType[DestinyItemType["Currency"] = 1] = "Currency";
    DestinyItemType[DestinyItemType["Armor"] = 2] = "Armor";
    DestinyItemType[DestinyItemType["Weapon"] = 3] = "Weapon";
    DestinyItemType[DestinyItemType["Message"] = 7] = "Message";
    DestinyItemType[DestinyItemType["Engram"] = 8] = "Engram";
    DestinyItemType[DestinyItemType["Consumable"] = 9] = "Consumable";
    DestinyItemType[DestinyItemType["ExchangeMaterial"] = 10] = "ExchangeMaterial";
    DestinyItemType[DestinyItemType["MissionReward"] = 11] = "MissionReward";
    DestinyItemType[DestinyItemType["QuestStep"] = 12] = "QuestStep";
    DestinyItemType[DestinyItemType["QuestStepComplete"] = 13] = "QuestStepComplete";
    DestinyItemType[DestinyItemType["Emblem"] = 14] = "Emblem";
    DestinyItemType[DestinyItemType["Quest"] = 15] = "Quest";
    DestinyItemType[DestinyItemType["Subclass"] = 16] = "Subclass";
    DestinyItemType[DestinyItemType["ClanBanner"] = 17] = "ClanBanner";
    DestinyItemType[DestinyItemType["Aura"] = 18] = "Aura";
    DestinyItemType[DestinyItemType["Mod"] = 19] = "Mod";
    DestinyItemType[DestinyItemType["Dummy"] = 20] = "Dummy";
    DestinyItemType[DestinyItemType["Ship"] = 21] = "Ship";
    DestinyItemType[DestinyItemType["Vehicle"] = 22] = "Vehicle";
    DestinyItemType[DestinyItemType["Emote"] = 23] = "Emote";
    DestinyItemType[DestinyItemType["Ghost"] = 24] = "Ghost";
    DestinyItemType[DestinyItemType["Package"] = 25] = "Package";
    DestinyItemType[DestinyItemType["Bounty"] = 26] = "Bounty";
    DestinyItemType[DestinyItemType["Wrapper"] = 27] = "Wrapper";
    DestinyItemType[DestinyItemType["SeasonalArtifact"] = 28] = "SeasonalArtifact";
    DestinyItemType[DestinyItemType["Finisher"] = 29] = "Finisher";
})(DestinyItemType = exports.DestinyItemType || (exports.DestinyItemType = {}));
var DestinyClass;
(function (DestinyClass) {
    DestinyClass[DestinyClass["Titan"] = 0] = "Titan";
    DestinyClass[DestinyClass["Hunter"] = 1] = "Hunter";
    DestinyClass[DestinyClass["Warlock"] = 2] = "Warlock";
    DestinyClass[DestinyClass["Unknown"] = 3] = "Unknown";
})(DestinyClass = exports.DestinyClass || (exports.DestinyClass = {}));
/**
 * As you run into items that need to be classified for Milestone purposes in ways
 * that we cannot infer via direct data, add a new classification here and use a
 * string constant to represent it in the local item config file.
 *
 * NOTE: This is not all of the item types available, and some of these are
 * holdovers from Destiny 1 that may or may not still exist.
 */
var SpecialItemType;
(function (SpecialItemType) {
    SpecialItemType[SpecialItemType["None"] = 0] = "None";
    SpecialItemType[SpecialItemType["SpecialCurrency"] = 1] = "SpecialCurrency";
    SpecialItemType[SpecialItemType["Armor"] = 8] = "Armor";
    SpecialItemType[SpecialItemType["Weapon"] = 9] = "Weapon";
    SpecialItemType[SpecialItemType["Engram"] = 23] = "Engram";
    SpecialItemType[SpecialItemType["Consumable"] = 24] = "Consumable";
    SpecialItemType[SpecialItemType["ExchangeMaterial"] = 25] = "ExchangeMaterial";
    SpecialItemType[SpecialItemType["MissionReward"] = 27] = "MissionReward";
    SpecialItemType[SpecialItemType["Currency"] = 29] = "Currency";
})(SpecialItemType = exports.SpecialItemType || (exports.SpecialItemType = {}));
/**
 * Represents the different kinds of acquisition behavior for progression reward
 * items.
 */
var DestinyProgressionRewardItemAcquisitionBehavior;
(function (DestinyProgressionRewardItemAcquisitionBehavior) {
    DestinyProgressionRewardItemAcquisitionBehavior[DestinyProgressionRewardItemAcquisitionBehavior["Instant"] = 0] = "Instant";
    DestinyProgressionRewardItemAcquisitionBehavior[DestinyProgressionRewardItemAcquisitionBehavior["PlayerClaimRequired"] = 1] = "PlayerClaimRequired";
})(DestinyProgressionRewardItemAcquisitionBehavior = exports.DestinyProgressionRewardItemAcquisitionBehavior || (exports.DestinyProgressionRewardItemAcquisitionBehavior = {}));
/**
 * Represents the different states a progression reward item can be in.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyProgressionRewardItemState;
(function (DestinyProgressionRewardItemState) {
    DestinyProgressionRewardItemState[DestinyProgressionRewardItemState["None"] = 0] = "None";
    /** If this is set, the reward should be hidden. */
    DestinyProgressionRewardItemState[DestinyProgressionRewardItemState["Invisible"] = 1] = "Invisible";
    /** If this is set, the reward has been earned. */
    DestinyProgressionRewardItemState[DestinyProgressionRewardItemState["Earned"] = 2] = "Earned";
    /** If this is set, the reward has been claimed. */
    DestinyProgressionRewardItemState[DestinyProgressionRewardItemState["Claimed"] = 4] = "Claimed";
    /**
     * If this is set, the reward is allowed to be claimed by this Character. An item
     * can be earned but still can't be claimed in certain circumstances, like if it's
     * only allowed for certain subclasses. It also might not be able to be claimed if
     * you already claimed it!
     */
    DestinyProgressionRewardItemState[DestinyProgressionRewardItemState["ClaimAllowed"] = 8] = "ClaimAllowed";
})(DestinyProgressionRewardItemState = exports.DestinyProgressionRewardItemState || (exports.DestinyProgressionRewardItemState = {}));
/**
 * Represents the possible components that can be returned from Destiny "Get" calls
 * such as GetProfile, GetCharacter, GetVendor etc...
 *
 * When making one of these requests, you will pass one or more of these components
 * as a comma separated list in the "?components=" querystring parameter. For
 * instance, if you want baseline Profile data, Character Data, and character
 * progressions, you would pass "?components=Profiles,Characters,
 * CharacterProgressions" You may use either the numerical or string values.
 */
var DestinyComponentType;
(function (DestinyComponentType) {
    DestinyComponentType[DestinyComponentType["None"] = 0] = "None";
    /**
     * Profiles is the most basic component, only relevant when calling GetProfile.
     * This returns basic information about the profile, which is almost nothing: a
     * list of characterIds, some information about the last time you logged in, and
     * that most sobering statistic: how long you've played.
     */
    DestinyComponentType[DestinyComponentType["Profiles"] = 100] = "Profiles";
    /**
     * Only applicable for GetProfile, this will return information about receipts for
     * refundable vendor items.
     */
    DestinyComponentType[DestinyComponentType["VendorReceipts"] = 101] = "VendorReceipts";
    /**
     * Asking for this will get you the profile-level inventories, such as your Vault
     * buckets (yeah, the Vault is really inventory buckets located on your Profile)
     */
    DestinyComponentType[DestinyComponentType["ProfileInventories"] = 102] = "ProfileInventories";
    /**
     * This will get you a summary of items on your Profile that we consider to be "
     * currencies", such as Glimmer. I mean, if there's Glimmer in Destiny 2. I didn't
     * say there was Glimmer.
     */
    DestinyComponentType[DestinyComponentType["ProfileCurrencies"] = 103] = "ProfileCurrencies";
    /**
     * This will get you any progression-related information that exists on a Profile-
     * wide level, across all characters.
     */
    DestinyComponentType[DestinyComponentType["ProfileProgression"] = 104] = "ProfileProgression";
    /**
     * This will get you information about the silver that this profile has on every
     * platform on which it plays.
     *
     * You may only request this component for the logged in user's Profile, and will
     * not recieve it if you request it for another Profile.
     */
    DestinyComponentType[DestinyComponentType["PlatformSilver"] = 105] = "PlatformSilver";
    /** This will get you summary info about each of the characters in the profile. */
    DestinyComponentType[DestinyComponentType["Characters"] = 200] = "Characters";
    /**
     * This will get you information about any non-equipped items on the character or
     * character(s) in question, if you're allowed to see it. You have to either be
     * authenticated as that user, or that user must allow anonymous viewing of their
     * non-equipped items in Bungie.Net settings to actually get results.
     */
    DestinyComponentType[DestinyComponentType["CharacterInventories"] = 201] = "CharacterInventories";
    /**
     * This will get you information about the progression (faction, experience, etc...
     * "levels") relevant to each character, if you are the currently authenticated
     * user or the user has elected to allow anonymous viewing of its progression info.
     */
    DestinyComponentType[DestinyComponentType["CharacterProgressions"] = 202] = "CharacterProgressions";
    /**
     * This will get you just enough information to be able to render the character in
     * 3D if you have written a 3D rendering library for Destiny Characters, or "
     * borrowed" ours. It's okay, I won't tell anyone if you're using it. I'm no snitch.
     * (actually, we don't care if you use it - go to town)
     */
    DestinyComponentType[DestinyComponentType["CharacterRenderData"] = 203] = "CharacterRenderData";
    /**
     * This will return info about activities that a user can see and gating on it, if
     * you are the currently authenticated user or the user has elected to allow
     * anonymous viewing of its progression info. Note that the data returned by this
     * can be unfortunately problematic and relatively unreliable in some cases. We'll
     * eventually work on making it more consistently reliable.
     */
    DestinyComponentType[DestinyComponentType["CharacterActivities"] = 204] = "CharacterActivities";
    /**
     * This will return info about the equipped items on the character(s). Everyone can
     * see this.
     */
    DestinyComponentType[DestinyComponentType["CharacterEquipment"] = 205] = "CharacterEquipment";
    /**
     * This will return basic info about instanced items - whether they can be equipped,
     * their tracked status, and some info commonly needed in many places (current
     * damage type, primary stat value, etc)
     */
    DestinyComponentType[DestinyComponentType["ItemInstances"] = 300] = "ItemInstances";
    /**
     * Items can have Objectives (DestinyObjectiveDefinition) bound to them. If they do,
     * this will return info for items that have such bound objectives.
     */
    DestinyComponentType[DestinyComponentType["ItemObjectives"] = 301] = "ItemObjectives";
    /**
     * Items can have perks (DestinyPerkDefinition). If they do, this will return info
     * for what perks are active on items.
     */
    DestinyComponentType[DestinyComponentType["ItemPerks"] = 302] = "ItemPerks";
    /**
     * If you just want to render the weapon, this is just enough info to do that
     * rendering.
     */
    DestinyComponentType[DestinyComponentType["ItemRenderData"] = 303] = "ItemRenderData";
    /**
     * Items can have stats, like rate of fire. Asking for this component will return
     * requested item's stats if they have stats.
     */
    DestinyComponentType[DestinyComponentType["ItemStats"] = 304] = "ItemStats";
    /**
     * Items can have sockets, where plugs can be inserted. Asking for this component
     * will return all info relevant to the sockets on items that have them.
     */
    DestinyComponentType[DestinyComponentType["ItemSockets"] = 305] = "ItemSockets";
    /**
     * Items can have talent grids, though that matters a lot less frequently than it
     * used to. Asking for this component will return all relevant info about activated
     * Nodes and Steps on this talent grid, like the good ol' days.
     */
    DestinyComponentType[DestinyComponentType["ItemTalentGrids"] = 306] = "ItemTalentGrids";
    /**
     * Items that *aren't* instanced still have important information you need to know:
     * how much of it you have, the itemHash so you can look up their
     * DestinyInventoryItemDefinition, whether they're locked, etc... Both instanced
     * and non-instanced items will have these properties. You will get this
     * automatically with Inventory components - you only need to pass this when
     * calling GetItem on a specific item.
     */
    DestinyComponentType[DestinyComponentType["ItemCommonData"] = 307] = "ItemCommonData";
    /**
     * Items that are "Plugs" can be inserted into sockets. This returns statuses about
     * those plugs and why they can/can't be inserted. I hear you giggling, there's
     * nothing funny about inserting plugs. Get your head out of the gutter and pay
     * attention!
     */
    DestinyComponentType[DestinyComponentType["ItemPlugStates"] = 308] = "ItemPlugStates";
    /**
     * Sometimes, plugs have objectives on them. This data can get really large, so we
     * split it into its own component. Please, don't grab it unless you need it.
     */
    DestinyComponentType[DestinyComponentType["ItemPlugObjectives"] = 309] = "ItemPlugObjectives";
    /**
     * Sometimes, designers create thousands of reusable plugs and suddenly your
     * response sizes are almost 3MB, and something has to give.
     *
     * Reusable Plugs were split off as their own component, away from ItemSockets, as
     * a result of the Plug changes in Shadowkeep that made plug data infeasibly large
     * for the most common use cases.
     *
     * Request this component if and only if you need to know what plugs *could* be
     * inserted into a socket, and need to know it before "drilling" into the details
     * of an item in your application (for instance, if you're doing some sort of
     * interesting sorting or aggregation based on available plugs.
     *
     * When you get this, you will also need to combine it with "Plug Sets" data if
     * you want a full picture of all of the available plugs: this component will only
     * return plugs that have state data that is per-item. See Plug Sets for available
     * plugs that have Character, Profile, or no state-specific restrictions.
     */
    DestinyComponentType[DestinyComponentType["ItemReusablePlugs"] = 310] = "ItemReusablePlugs";
    /**
     * When obtaining vendor information, this will return summary information about
     * the Vendor or Vendors being returned.
     */
    DestinyComponentType[DestinyComponentType["Vendors"] = 400] = "Vendors";
    /**
     * When obtaining vendor information, this will return information about the
     * categories of items provided by the Vendor.
     */
    DestinyComponentType[DestinyComponentType["VendorCategories"] = 401] = "VendorCategories";
    /**
     * When obtaining vendor information, this will return the information about items
     * being sold by the Vendor.
     */
    DestinyComponentType[DestinyComponentType["VendorSales"] = 402] = "VendorSales";
    /**
     * Asking for this component will return you the account's Kiosk statuses: that is,
     * what items have been filled out/acquired. But only if you are the currently
     * authenticated user or the user has elected to allow anonymous viewing of its
     * progression info.
     */
    DestinyComponentType[DestinyComponentType["Kiosks"] = 500] = "Kiosks";
    /**
     * A "shortcut" component that will give you all of the item hashes/quantities of
     * items that the requested character can use to determine if an action (purchasing,
     * socket insertion) has the required currency. (recall that all currencies are
     * just items, and that some vendor purchases require items that you might not
     * traditionally consider to be a "currency", like plugs/mods!)
     */
    DestinyComponentType[DestinyComponentType["CurrencyLookups"] = 600] = "CurrencyLookups";
    /**
     * Returns summary status information about all "Presentation Nodes". See
     * DestinyPresentationNodeDefinition for more details, but the gist is that these
     * are entities used by the game UI to bucket Collectibles and Records into a
     * hierarchy of categories. You may ask for and use this data if you want to
     * perform similar bucketing in your own UI: or you can skip it and roll your own.
     */
    DestinyComponentType[DestinyComponentType["PresentationNodes"] = 700] = "PresentationNodes";
    /**
     * Returns summary status information about all "Collectibles". These are records
     * of what items you've discovered while playing Destiny, and some other basic
     * information. For detailed information, you will have to call a separate endpoint
     * devoted to the purpose.
     */
    DestinyComponentType[DestinyComponentType["Collectibles"] = 800] = "Collectibles";
    /**
     * Returns summary status information about all "Records" (also known in the game
     * as "Triumphs". I know, it's confusing because there's also "Moments of Triumph"
     * that will themselves be represented as "Triumphs.")
     */
    DestinyComponentType[DestinyComponentType["Records"] = 900] = "Records";
    /**
     * Returns information that Bungie considers to be "Transitory": data that may
     * change too frequently or come from a non-authoritative source such that we don't
     * consider the data to be fully trustworthy, but that might prove useful for some
     * limited use cases. We can provide no guarantee of timeliness nor consistency for
     * this data: buyer beware with the Transitory component.
     */
    DestinyComponentType[DestinyComponentType["Transitory"] = 1000] = "Transitory";
})(DestinyComponentType = exports.DestinyComponentType || (exports.DestinyComponentType = {}));
/**
 * If the enum value is > 100, it is a "special" group that cannot be queried for
 * directly (special cases apply to when they are returned, and are not relevant in
 * general cases)
 */
var DestinyStatsGroupType;
(function (DestinyStatsGroupType) {
    DestinyStatsGroupType[DestinyStatsGroupType["None"] = 0] = "None";
    DestinyStatsGroupType[DestinyStatsGroupType["General"] = 1] = "General";
    DestinyStatsGroupType[DestinyStatsGroupType["Weapons"] = 2] = "Weapons";
    DestinyStatsGroupType[DestinyStatsGroupType["Medals"] = 3] = "Medals";
    /**
     * This is purely to serve as the dividing line between filterable and un-
     * filterable groups. Below this number is a group you can pass as a filter. Above
     * it are groups used in very specific circumstances and not relevant for filtering.
     */
    DestinyStatsGroupType[DestinyStatsGroupType["ReservedGroups"] = 100] = "ReservedGroups";
    /** Only applicable while generating leaderboards. */
    DestinyStatsGroupType[DestinyStatsGroupType["Leaderboard"] = 101] = "Leaderboard";
    /** These will *only* be consumed by GetAggregateStatsByActivity */
    DestinyStatsGroupType[DestinyStatsGroupType["Activity"] = 102] = "Activity";
    /** These are only consumed and returned by GetUniqueWeaponHistory */
    DestinyStatsGroupType[DestinyStatsGroupType["UniqueWeapon"] = 103] = "UniqueWeapon";
    DestinyStatsGroupType[DestinyStatsGroupType["Internal"] = 104] = "Internal";
})(DestinyStatsGroupType = exports.DestinyStatsGroupType || (exports.DestinyStatsGroupType = {}));
var PeriodType;
(function (PeriodType) {
    PeriodType[PeriodType["None"] = 0] = "None";
    PeriodType[PeriodType["Daily"] = 1] = "Daily";
    PeriodType[PeriodType["AllTime"] = 2] = "AllTime";
    PeriodType[PeriodType["Activity"] = 3] = "Activity";
})(PeriodType = exports.PeriodType || (exports.PeriodType = {}));
var ItemBindStatus;
(function (ItemBindStatus) {
    ItemBindStatus[ItemBindStatus["NotBound"] = 0] = "NotBound";
    ItemBindStatus[ItemBindStatus["BoundToCharacter"] = 1] = "BoundToCharacter";
    ItemBindStatus[ItemBindStatus["BoundToAccount"] = 2] = "BoundToAccount";
    ItemBindStatus[ItemBindStatus["BoundToGuild"] = 3] = "BoundToGuild";
})(ItemBindStatus = exports.ItemBindStatus || (exports.ItemBindStatus = {}));
/**
 * Whether you can transfer an item, and why not if you can't.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var TransferStatuses;
(function (TransferStatuses) {
    /** The item can be transferred. */
    TransferStatuses[TransferStatuses["CanTransfer"] = 0] = "CanTransfer";
    /** You can't transfer the item because it is equipped on a character. */
    TransferStatuses[TransferStatuses["ItemIsEquipped"] = 1] = "ItemIsEquipped";
    /**
     * The item is defined as not transferrable in its DestinyInventoryItemDefinition.
     * nonTransferrable property.
     */
    TransferStatuses[TransferStatuses["NotTransferrable"] = 2] = "NotTransferrable";
    /**
     * You could transfer the item, but the place you're trying to put it has run out
     * of room! Check your remaining Vault and/or character space.
     */
    TransferStatuses[TransferStatuses["NoRoomInDestination"] = 4] = "NoRoomInDestination";
})(TransferStatuses = exports.TransferStatuses || (exports.TransferStatuses = {}));
/**
 * A flags enumeration/bitmask where each bit represents a different possible state
 * that the item can be in that may effect how the item is displayed to the user
 * and what actions can be performed against it.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var ItemState;
(function (ItemState) {
    ItemState[ItemState["None"] = 0] = "None";
    /**
     * If this bit is set, the item has been "locked" by the user and cannot be deleted.
     * You may want to represent this visually with a "lock" icon.
     */
    ItemState[ItemState["Locked"] = 1] = "Locked";
    /**
     * If this bit is set, the item is a quest that's being tracked by the user. You
     * may want a visual indicator to show that this is a tracked quest.
     */
    ItemState[ItemState["Tracked"] = 2] = "Tracked";
    /**
     * If this bit is set, the item has a Masterwork plug inserted. This usually
     * coincides with having a special "glowing" effect applied to the item's icon.
     */
    ItemState[ItemState["Masterwork"] = 4] = "Masterwork";
})(ItemState = exports.ItemState || (exports.ItemState = {}));
/**
 * A set of flags for reason(s) why the component populated in the way that it did.
 * Inspect the individual flags for the reasons.
 */
var ComponentPrivacySetting;
(function (ComponentPrivacySetting) {
    ComponentPrivacySetting[ComponentPrivacySetting["None"] = 0] = "None";
    ComponentPrivacySetting[ComponentPrivacySetting["Public"] = 1] = "Public";
    ComponentPrivacySetting[ComponentPrivacySetting["Private"] = 2] = "Private";
})(ComponentPrivacySetting = exports.ComponentPrivacySetting || (exports.ComponentPrivacySetting = {}));
/**
 * A flags enumeration/bitmask indicating the versions of the game that a given
 * user has purchased.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyGameVersions;
(function (DestinyGameVersions) {
    DestinyGameVersions[DestinyGameVersions["None"] = 0] = "None";
    DestinyGameVersions[DestinyGameVersions["Destiny2"] = 1] = "Destiny2";
    DestinyGameVersions[DestinyGameVersions["DLC1"] = 2] = "DLC1";
    DestinyGameVersions[DestinyGameVersions["DLC2"] = 4] = "DLC2";
    DestinyGameVersions[DestinyGameVersions["Forsaken"] = 8] = "Forsaken";
    DestinyGameVersions[DestinyGameVersions["YearTwoAnnualPass"] = 16] = "YearTwoAnnualPass";
    DestinyGameVersions[DestinyGameVersions["Shadowkeep"] = 32] = "Shadowkeep";
})(DestinyGameVersions = exports.DestinyGameVersions || (exports.DestinyGameVersions = {}));
/**
 * I know this doesn't look like a Flags Enumeration/bitmask right now, but I
 * assure you it is. This is the possible states that a Presentation Node can be in,
 * and it is almost certain that its potential states will increase in the future.
 * So don't treat it like a straight up enumeration.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyPresentationNodeState;
(function (DestinyPresentationNodeState) {
    DestinyPresentationNodeState[DestinyPresentationNodeState["None"] = 0] = "None";
    /**
     * If this is set, the game recommends that you not show this node. But you know
     * your life, do what you've got to do.
     */
    DestinyPresentationNodeState[DestinyPresentationNodeState["Invisible"] = 1] = "Invisible";
    /** Turns out Presentation Nodes can also be obscured. If they are, this is set. */
    DestinyPresentationNodeState[DestinyPresentationNodeState["Obscured"] = 2] = "Obscured";
})(DestinyPresentationNodeState = exports.DestinyPresentationNodeState || (exports.DestinyPresentationNodeState = {}));
/**
 * A Flags enumeration/bitmask where each bit represents a possible state that a
 * Record/Triumph can be in.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyRecordState;
(function (DestinyRecordState) {
    /**
     * If there are no flags set, the record is in a state where it *could* be redeemed,
     * but it has not been yet.
     */
    DestinyRecordState[DestinyRecordState["None"] = 0] = "None";
    /** If this is set, the completed record has been redeemed. */
    DestinyRecordState[DestinyRecordState["RecordRedeemed"] = 1] = "RecordRedeemed";
    /**
     * If this is set, there's a reward available from this Record but it's unavailable
     * for redemption.
     */
    DestinyRecordState[DestinyRecordState["RewardUnavailable"] = 2] = "RewardUnavailable";
    /** If this is set, the objective for this Record has not yet been completed. */
    DestinyRecordState[DestinyRecordState["ObjectiveNotCompleted"] = 4] = "ObjectiveNotCompleted";
    /**
     * If this is set, the game recommends that you replace the display text of this
     * Record with DestinyRecordDefinition.stateInfo.obscuredString.
     */
    DestinyRecordState[DestinyRecordState["Obscured"] = 8] = "Obscured";
    /**
     * If this is set, the game recommends that you not show this record. Do what you
     * will with this recommendation.
     */
    DestinyRecordState[DestinyRecordState["Invisible"] = 16] = "Invisible";
    /**
     * If this is set, you can't complete this record because you lack some permission
     * that's required to complete it.
     */
    DestinyRecordState[DestinyRecordState["EntitlementUnowned"] = 32] = "EntitlementUnowned";
    /**
     * If this is set, the record has a title (check DestinyRecordDefinition for title
     * info) and you can equip it.
     */
    DestinyRecordState[DestinyRecordState["CanEquipTitle"] = 64] = "CanEquipTitle";
})(DestinyRecordState = exports.DestinyRecordState || (exports.DestinyRecordState = {}));
/**
 * A Flags Enumeration/bitmask where each bit represents a different state that the
 * Collectible can be in. A collectible can be in any number of these states, and
 * you can choose to use or ignore any or all of them when making your own UI that
 * shows Collectible info. Our displays are going to honor them, but we're also the
 * kind of people who only pretend to inhale before quickly passing it to the left.
 * So, you know, do what you got to do.
 *
 * (All joking aside, please note the caveat I mention around the Invisible flag:
 * there are cases where it is in the best interest of your users to honor these
 * flags even if you're a "show all the data" person. Collector-oriented compulsion
 * is a very unfortunate and real thing, and I would hate to instill that
 * compulsion in others through showing them items that they cannot earn. Please
 * consider this when you are making your own apps/sites.)
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyCollectibleState;
(function (DestinyCollectibleState) {
    DestinyCollectibleState[DestinyCollectibleState["None"] = 0] = "None";
    /** If this flag is set, you have not yet obtained this collectible. */
    DestinyCollectibleState[DestinyCollectibleState["NotAcquired"] = 1] = "NotAcquired";
    /**
     * If this flag is set, the item is "obscured" to you: you can/should use the
     * alternate item hash found in DestinyCollectibleDefinition.stateInfo.
     * obscuredOverrideItemHash when displaying this collectible instead of the default
     * display info.
     */
    DestinyCollectibleState[DestinyCollectibleState["Obscured"] = 2] = "Obscured";
    /**
     * If this flag is set, the collectible should not be shown to the user.
     *
     * Please do consider honoring this flag. It is used - for example - to hide items
     * that a person didn't get from the Eververse. I can't prevent these from being
     * returned in definitions, because some people may have acquired them and thus
     * they should show up: but I would hate for people to start feeling some variant
     * of a Collector's Remorse about these items, and thus increasing their purchasing
     * based on that compulsion. That would be a very unfortunate outcome, and one that
     * I wouldn't like to see happen. So please, whether or not I'm your mom, consider
     * honoring this flag and don't show people invisible collectibles.
     */
    DestinyCollectibleState[DestinyCollectibleState["Invisible"] = 4] = "Invisible";
    /**
     * If this flag is set, the collectible requires payment for creating an instance
     * of the item, and you are lacking in currency. Bring the benjamins next time. Or
     * spinmetal. Whatever.
     */
    DestinyCollectibleState[DestinyCollectibleState["CannotAffordMaterialRequirements"] = 8] = "CannotAffordMaterialRequirements";
    /**
     * If this flag is set, you can't pull this item out of your collection because
     * there's no room left in your inventory.
     */
    DestinyCollectibleState[DestinyCollectibleState["InventorySpaceUnavailable"] = 16] = "InventorySpaceUnavailable";
    /**
     * If this flag is set, you already have one of these items and can't have a second
     * one.
     */
    DestinyCollectibleState[DestinyCollectibleState["UniquenessViolation"] = 32] = "UniquenessViolation";
    /**
     * If this flag is set, the ability to pull this item out of your collection has
     * been disabled.
     */
    DestinyCollectibleState[DestinyCollectibleState["PurchaseDisabled"] = 64] = "PurchaseDisabled";
})(DestinyCollectibleState = exports.DestinyCollectibleState || (exports.DestinyCollectibleState = {}));
/**
 * A flags enumeration that represents a Fireteam Member's status.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyPartyMemberStates;
(function (DestinyPartyMemberStates) {
    DestinyPartyMemberStates[DestinyPartyMemberStates["None"] = 0] = "None";
    /** This one's pretty obvious - they're on your Fireteam. */
    DestinyPartyMemberStates[DestinyPartyMemberStates["FireteamMember"] = 1] = "FireteamMember";
    /** I don't know what it means to be in a 'Posse', but apparently this is it. */
    DestinyPartyMemberStates[DestinyPartyMemberStates["PosseMember"] = 2] = "PosseMember";
    /**
     * Nor do I understand the difference between them being in a 'Group' vs. a '
     * Fireteam'.
     *
     * I'll update these docs once I get more info. If I get more info. If you're
     * reading this, I never got more info. You're on your own, kid.
     */
    DestinyPartyMemberStates[DestinyPartyMemberStates["GroupMember"] = 4] = "GroupMember";
    /** This person is the party leader. */
    DestinyPartyMemberStates[DestinyPartyMemberStates["PartyLeader"] = 8] = "PartyLeader";
})(DestinyPartyMemberStates = exports.DestinyPartyMemberStates || (exports.DestinyPartyMemberStates = {}));
/**
 * A player can choose to restrict requests to join their Fireteam to specific
 * states. These are the possible states a user can choose.
 */
var DestinyGamePrivacySetting;
(function (DestinyGamePrivacySetting) {
    DestinyGamePrivacySetting[DestinyGamePrivacySetting["Open"] = 0] = "Open";
    DestinyGamePrivacySetting[DestinyGamePrivacySetting["ClanAndFriendsOnly"] = 1] = "ClanAndFriendsOnly";
    DestinyGamePrivacySetting[DestinyGamePrivacySetting["FriendsOnly"] = 2] = "FriendsOnly";
    DestinyGamePrivacySetting[DestinyGamePrivacySetting["InvitationOnly"] = 3] = "InvitationOnly";
    DestinyGamePrivacySetting[DestinyGamePrivacySetting["Closed"] = 4] = "Closed";
})(DestinyGamePrivacySetting = exports.DestinyGamePrivacySetting || (exports.DestinyGamePrivacySetting = {}));
/**
 * A Flags enumeration representing the reasons why a person can't join this user's
 * fireteam.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyJoinClosedReasons;
(function (DestinyJoinClosedReasons) {
    DestinyJoinClosedReasons[DestinyJoinClosedReasons["None"] = 0] = "None";
    /** The user is currently in matchmaking. */
    DestinyJoinClosedReasons[DestinyJoinClosedReasons["InMatchmaking"] = 1] = "InMatchmaking";
    /** The user is currently in a loading screen. */
    DestinyJoinClosedReasons[DestinyJoinClosedReasons["Loading"] = 2] = "Loading";
    /** The user is in an activity that requires solo play. */
    DestinyJoinClosedReasons[DestinyJoinClosedReasons["SoloMode"] = 4] = "SoloMode";
    /**
     * The user can't be joined for one of a variety of internal reasons. Basically,
     * the game can't let you join at this time, but for reasons that aren't under the
     * control of this user.
     */
    DestinyJoinClosedReasons[DestinyJoinClosedReasons["InternalReasons"] = 8] = "InternalReasons";
    /**
     * The user's current activity/quest/other transitory game state is preventing
     * joining.
     */
    DestinyJoinClosedReasons[DestinyJoinClosedReasons["DisallowedByGameState"] = 16] = "DisallowedByGameState";
    /** The user appears to be offline. */
    DestinyJoinClosedReasons[DestinyJoinClosedReasons["Offline"] = 32768] = "Offline";
})(DestinyJoinClosedReasons = exports.DestinyJoinClosedReasons || (exports.DestinyJoinClosedReasons = {}));
var DestinyRace;
(function (DestinyRace) {
    DestinyRace[DestinyRace["Human"] = 0] = "Human";
    DestinyRace[DestinyRace["Awoken"] = 1] = "Awoken";
    DestinyRace[DestinyRace["Exo"] = 2] = "Exo";
    DestinyRace[DestinyRace["Unknown"] = 3] = "Unknown";
})(DestinyRace = exports.DestinyRace || (exports.DestinyRace = {}));
/**
 * A hint for the UI as to what display information ought to be shown. Defaults to
 * showing the static MilestoneDefinition's display properties.
 *
 * If for some reason the indicated property is not populated, fall back to the
 * MilestoneDefinition.displayProperties.
 */
var DestinyMilestoneDisplayPreference;
(function (DestinyMilestoneDisplayPreference) {
    /**
     * Indicates you should show DestinyMilestoneDefinition.displayProperties for this
     * Milestone.
     */
    DestinyMilestoneDisplayPreference[DestinyMilestoneDisplayPreference["MilestoneDefinition"] = 0] = "MilestoneDefinition";
    /**
     * Indicates you should show the displayProperties for any currently active Quest
     * Steps in DestinyMilestone.availableQuests.
     */
    DestinyMilestoneDisplayPreference[DestinyMilestoneDisplayPreference["CurrentQuestSteps"] = 1] = "CurrentQuestSteps";
    /**
     * Indicates you should show the displayProperties for any currently active
     * Activities and their Challenges in DestinyMilestone.activities.
     */
    DestinyMilestoneDisplayPreference[DestinyMilestoneDisplayPreference["CurrentActivityChallenges"] = 2] = "CurrentActivityChallenges";
})(DestinyMilestoneDisplayPreference = exports.DestinyMilestoneDisplayPreference || (exports.DestinyMilestoneDisplayPreference = {}));
/**
 * The type of milestone. Milestones can be Tutorials, one-time/triggered/non-
 * repeating but not necessarily tutorials, or Repeating Milestones.
 */
var DestinyMilestoneType;
(function (DestinyMilestoneType) {
    DestinyMilestoneType[DestinyMilestoneType["Unknown"] = 0] = "Unknown";
    /**
     * One-time milestones that are specifically oriented toward teaching players about
     * new mechanics and gameplay modes.
     */
    DestinyMilestoneType[DestinyMilestoneType["Tutorial"] = 1] = "Tutorial";
    /** Milestones that, once completed a single time, can never be repeated. */
    DestinyMilestoneType[DestinyMilestoneType["OneTime"] = 2] = "OneTime";
    /**
     * Milestones that repeat/reset on a weekly basis. They need not all reset on the
     * same day or time, but do need to reset weekly to qualify for this type.
     */
    DestinyMilestoneType[DestinyMilestoneType["Weekly"] = 3] = "Weekly";
    /** Milestones that repeat or reset on a daily basis. */
    DestinyMilestoneType[DestinyMilestoneType["Daily"] = 4] = "Daily";
    /**
     * Special indicates that the event is not on a daily/weekly cadence, but does
     * occur more than once. For instance, Iron Banner in Destiny 1 or the Dawning were
     * examples of what could be termed "Special" events.
     */
    DestinyMilestoneType[DestinyMilestoneType["Special"] = 5] = "Special";
})(DestinyMilestoneType = exports.DestinyMilestoneType || (exports.DestinyMilestoneType = {}));
/**
 * An enumeration representing the potential difficulty levels of an activity.
 * Their names are... more qualitative than quantitative.
 */
var DestinyActivityDifficultyTier;
(function (DestinyActivityDifficultyTier) {
    DestinyActivityDifficultyTier[DestinyActivityDifficultyTier["Trivial"] = 0] = "Trivial";
    DestinyActivityDifficultyTier[DestinyActivityDifficultyTier["Easy"] = 1] = "Easy";
    DestinyActivityDifficultyTier[DestinyActivityDifficultyTier["Normal"] = 2] = "Normal";
    DestinyActivityDifficultyTier[DestinyActivityDifficultyTier["Challenging"] = 3] = "Challenging";
    DestinyActivityDifficultyTier[DestinyActivityDifficultyTier["Hard"] = 4] = "Hard";
    DestinyActivityDifficultyTier[DestinyActivityDifficultyTier["Brave"] = 5] = "Brave";
    DestinyActivityDifficultyTier[DestinyActivityDifficultyTier["AlmostImpossible"] = 6] = "AlmostImpossible";
    DestinyActivityDifficultyTier[DestinyActivityDifficultyTier["Impossible"] = 7] = "Impossible";
})(DestinyActivityDifficultyTier = exports.DestinyActivityDifficultyTier || (exports.DestinyActivityDifficultyTier = {}));
/**
 * The reasons why an item cannot be equipped, if any. Many flags can be set, or "
 * None" if
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var EquipFailureReason;
(function (EquipFailureReason) {
    /** The item is/was able to be equipped. */
    EquipFailureReason[EquipFailureReason["None"] = 0] = "None";
    /**
     * This is not the kind of item that can be equipped. Did you try equipping Glimmer
     * or something?
     */
    EquipFailureReason[EquipFailureReason["ItemUnequippable"] = 1] = "ItemUnequippable";
    /**
     * This item is part of a "unique set", and you can't have more than one item of
     * that same set type equipped at once. For instance, if you already have an Exotic
     * Weapon equipped, you can't equip a second one in another weapon slot.
     */
    EquipFailureReason[EquipFailureReason["ItemUniqueEquipRestricted"] = 2] = "ItemUniqueEquipRestricted";
    /**
     * This item has state-based gating that prevents it from being equipped in certain
     * circumstances. For instance, an item might be for Warlocks only and you're a
     * Titan, or it might require you to have beaten some special quest that you haven'
     * t beaten yet. Use the additional failure data passed on the item itself to get
     * more information about what the specific failure case was (See
     * DestinyInventoryItemDefinition and DestinyItemInstanceComponent)
     */
    EquipFailureReason[EquipFailureReason["ItemFailedUnlockCheck"] = 4] = "ItemFailedUnlockCheck";
    /**
     * This item requires you to have reached a specific character level in order to
     * equip it, and you haven't reached that level yet.
     */
    EquipFailureReason[EquipFailureReason["ItemFailedLevelCheck"] = 8] = "ItemFailedLevelCheck";
    /**
     * This item can't be equipped on the character requested, because it must be in
     * that character's inventory first. Transfer the item to the character you want to
     * equip it before you attempt to equip it.
     */
    EquipFailureReason[EquipFailureReason["ItemNotOnCharacter"] = 16] = "ItemNotOnCharacter";
})(EquipFailureReason = exports.EquipFailureReason || (exports.EquipFailureReason = {}));
var DestinyTalentNodeState;
(function (DestinyTalentNodeState) {
    DestinyTalentNodeState[DestinyTalentNodeState["Invalid"] = 0] = "Invalid";
    DestinyTalentNodeState[DestinyTalentNodeState["CanUpgrade"] = 1] = "CanUpgrade";
    DestinyTalentNodeState[DestinyTalentNodeState["NoPoints"] = 2] = "NoPoints";
    DestinyTalentNodeState[DestinyTalentNodeState["NoPrerequisites"] = 3] = "NoPrerequisites";
    DestinyTalentNodeState[DestinyTalentNodeState["NoSteps"] = 4] = "NoSteps";
    DestinyTalentNodeState[DestinyTalentNodeState["NoUnlock"] = 5] = "NoUnlock";
    DestinyTalentNodeState[DestinyTalentNodeState["NoMaterial"] = 6] = "NoMaterial";
    DestinyTalentNodeState[DestinyTalentNodeState["NoGridLevel"] = 7] = "NoGridLevel";
    DestinyTalentNodeState[DestinyTalentNodeState["SwappingLocked"] = 8] = "SwappingLocked";
    DestinyTalentNodeState[DestinyTalentNodeState["MustSwap"] = 9] = "MustSwap";
    DestinyTalentNodeState[DestinyTalentNodeState["Complete"] = 10] = "Complete";
    DestinyTalentNodeState[DestinyTalentNodeState["Unknown"] = 11] = "Unknown";
    DestinyTalentNodeState[DestinyTalentNodeState["CreationOnly"] = 12] = "CreationOnly";
    DestinyTalentNodeState[DestinyTalentNodeState["Hidden"] = 13] = "Hidden";
})(DestinyTalentNodeState = exports.DestinyTalentNodeState || (exports.DestinyTalentNodeState = {}));
/**
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var VendorItemStatus;
(function (VendorItemStatus) {
    VendorItemStatus[VendorItemStatus["Success"] = 0] = "Success";
    VendorItemStatus[VendorItemStatus["NoInventorySpace"] = 1] = "NoInventorySpace";
    VendorItemStatus[VendorItemStatus["NoFunds"] = 2] = "NoFunds";
    VendorItemStatus[VendorItemStatus["NoProgression"] = 4] = "NoProgression";
    VendorItemStatus[VendorItemStatus["NoUnlock"] = 8] = "NoUnlock";
    VendorItemStatus[VendorItemStatus["NoQuantity"] = 16] = "NoQuantity";
    VendorItemStatus[VendorItemStatus["OutsidePurchaseWindow"] = 32] = "OutsidePurchaseWindow";
    VendorItemStatus[VendorItemStatus["NotAvailable"] = 64] = "NotAvailable";
    VendorItemStatus[VendorItemStatus["UniquenessViolation"] = 128] = "UniquenessViolation";
    VendorItemStatus[VendorItemStatus["UnknownError"] = 256] = "UnknownError";
    VendorItemStatus[VendorItemStatus["AlreadySelling"] = 512] = "AlreadySelling";
    VendorItemStatus[VendorItemStatus["Unsellable"] = 1024] = "Unsellable";
    VendorItemStatus[VendorItemStatus["SellingInhibited"] = 2048] = "SellingInhibited";
    VendorItemStatus[VendorItemStatus["AlreadyOwned"] = 4096] = "AlreadyOwned";
    VendorItemStatus[VendorItemStatus["DisplayOnly"] = 8192] = "DisplayOnly";
})(VendorItemStatus = exports.VendorItemStatus || (exports.VendorItemStatus = {}));
/**
 * The possible states of Destiny Profile Records. IMPORTANT: Any given item can
 * theoretically have many of these states simultaneously: as a result, this was
 * altered to be a flags enumeration/bitmask for v3.2.0.
 *
 * This enum represents a set of flags - use bitwise operators to check which of
 * these match your value.
 */
var DestinyVendorItemState;
(function (DestinyVendorItemState) {
    /** There are no augments on the item. */
    DestinyVendorItemState[DestinyVendorItemState["None"] = 0] = "None";
    /**
     * Deprecated forever (probably). There was a time when Records were going to be
     * implemented through Vendors, and this field was relevant. Now they're
     * implemented through Presentation Nodes, and this field doesn't matter anymore.
     */
    DestinyVendorItemState[DestinyVendorItemState["Incomplete"] = 1] = "Incomplete";
    /**
     * Deprecated forever (probably). See the description of the "Incomplete" value for
     * the juicy scoop.
     */
    DestinyVendorItemState[DestinyVendorItemState["RewardAvailable"] = 2] = "RewardAvailable";
    /**
     * Deprecated forever (probably). See the description of the "Incomplete" value for
     * the juicy scoop.
     */
    DestinyVendorItemState[DestinyVendorItemState["Complete"] = 4] = "Complete";
    /**
     * This item is considered to be "newly available", and should have some UI showing
     * how shiny it is.
     */
    DestinyVendorItemState[DestinyVendorItemState["New"] = 8] = "New";
    /**
     * This item is being "featured", and should be shiny in a different way from items
     * that are merely new.
     */
    DestinyVendorItemState[DestinyVendorItemState["Featured"] = 16] = "Featured";
    /** This item is only available for a limited time, and that time is approaching. */
    DestinyVendorItemState[DestinyVendorItemState["Ending"] = 32] = "Ending";
    /** This item is "on sale". Get it while it's hot. */
    DestinyVendorItemState[DestinyVendorItemState["OnSale"] = 64] = "OnSale";
    /** This item is already owned. */
    DestinyVendorItemState[DestinyVendorItemState["Owned"] = 128] = "Owned";
    /** This item should be shown with a "wide view" instead of normal icon view. */
    DestinyVendorItemState[DestinyVendorItemState["WideView"] = 256] = "WideView";
    /**
     * This indicates that you should show some kind of attention-requesting indicator
     * on the item, in a similar manner to items in the nexus that have such
     * notifications.
     */
    DestinyVendorItemState[DestinyVendorItemState["NexusAttention"] = 512] = "NexusAttention";
})(DestinyVendorItemState = exports.DestinyVendorItemState || (exports.DestinyVendorItemState = {}));
/**
 * If you look in the DestinyInventoryItemDefinition's "sockets" property, you'll
 * see that there are two types of sockets: intrinsic, and "socketEntry."
 *
 * Unfortunately, because Intrinsic sockets are a whole separate array, it is no
 * longer sufficient to know the index into that array to know which socket we're
 * talking about. You have to know whether it's in the default "socketEntries" or
 * if it's in the "intrinsic" list.
 */
var DestinySocketArrayType;
(function (DestinySocketArrayType) {
    DestinySocketArrayType[DestinySocketArrayType["Default"] = 0] = "Default";
    DestinySocketArrayType[DestinySocketArrayType["Intrinsic"] = 1] = "Intrinsic";
})(DestinySocketArrayType = exports.DestinySocketArrayType || (exports.DestinySocketArrayType = {}));
var DestinyStatsCategoryType;
(function (DestinyStatsCategoryType) {
    DestinyStatsCategoryType[DestinyStatsCategoryType["None"] = 0] = "None";
    DestinyStatsCategoryType[DestinyStatsCategoryType["Kills"] = 1] = "Kills";
    DestinyStatsCategoryType[DestinyStatsCategoryType["Assists"] = 2] = "Assists";
    DestinyStatsCategoryType[DestinyStatsCategoryType["Deaths"] = 3] = "Deaths";
    DestinyStatsCategoryType[DestinyStatsCategoryType["Criticals"] = 4] = "Criticals";
    DestinyStatsCategoryType[DestinyStatsCategoryType["KDa"] = 5] = "KDa";
    DestinyStatsCategoryType[DestinyStatsCategoryType["KD"] = 6] = "KD";
    DestinyStatsCategoryType[DestinyStatsCategoryType["Score"] = 7] = "Score";
    DestinyStatsCategoryType[DestinyStatsCategoryType["Entered"] = 8] = "Entered";
    DestinyStatsCategoryType[DestinyStatsCategoryType["TimePlayed"] = 9] = "TimePlayed";
    DestinyStatsCategoryType[DestinyStatsCategoryType["MedalWins"] = 10] = "MedalWins";
    DestinyStatsCategoryType[DestinyStatsCategoryType["MedalGame"] = 11] = "MedalGame";
    DestinyStatsCategoryType[DestinyStatsCategoryType["MedalSpecialKills"] = 12] = "MedalSpecialKills";
    DestinyStatsCategoryType[DestinyStatsCategoryType["MedalSprees"] = 13] = "MedalSprees";
    DestinyStatsCategoryType[DestinyStatsCategoryType["MedalMultiKills"] = 14] = "MedalMultiKills";
    DestinyStatsCategoryType[DestinyStatsCategoryType["MedalAbilities"] = 15] = "MedalAbilities";
})(DestinyStatsCategoryType = exports.DestinyStatsCategoryType || (exports.DestinyStatsCategoryType = {}));
var UnitType;
(function (UnitType) {
    UnitType[UnitType["None"] = 0] = "None";
    /** Indicates the statistic is a simple count of something. */
    UnitType[UnitType["Count"] = 1] = "Count";
    /** Indicates the statistic is a per game average. */
    UnitType[UnitType["PerGame"] = 2] = "PerGame";
    /** Indicates the number of seconds */
    UnitType[UnitType["Seconds"] = 3] = "Seconds";
    /** Indicates the number of points earned */
    UnitType[UnitType["Points"] = 4] = "Points";
    /** Values represents a team ID */
    UnitType[UnitType["Team"] = 5] = "Team";
    /** Values represents a distance (units to-be-determined) */
    UnitType[UnitType["Distance"] = 6] = "Distance";
    /** Ratio represented as a whole value from 0 to 100. */
    UnitType[UnitType["Percent"] = 7] = "Percent";
    /** Ratio of something, shown with decimal places */
    UnitType[UnitType["Ratio"] = 8] = "Ratio";
    /** True or false */
    UnitType[UnitType["Boolean"] = 9] = "Boolean";
    /** The stat is actually a weapon type. */
    UnitType[UnitType["WeaponType"] = 10] = "WeaponType";
    /** Indicates victory, defeat, or something in between. */
    UnitType[UnitType["Standing"] = 11] = "Standing";
    /** Number of milliseconds some event spanned. For example, race time, or lap time. */
    UnitType[UnitType["Milliseconds"] = 12] = "Milliseconds";
    /** The value is a enumeration of the Completion Reason type. */
    UnitType[UnitType["CompletionReason"] = 13] = "CompletionReason";
})(UnitType = exports.UnitType || (exports.UnitType = {}));
var AwaType;
(function (AwaType) {
    AwaType[AwaType["None"] = 0] = "None";
    /** Insert plugs into sockets. */
    AwaType[AwaType["InsertPlugs"] = 1] = "InsertPlugs";
})(AwaType = exports.AwaType || (exports.AwaType = {}));
var AwaUserSelection;
(function (AwaUserSelection) {
    AwaUserSelection[AwaUserSelection["None"] = 0] = "None";
    AwaUserSelection[AwaUserSelection["Rejected"] = 1] = "Rejected";
    AwaUserSelection[AwaUserSelection["Approved"] = 2] = "Approved";
})(AwaUserSelection = exports.AwaUserSelection || (exports.AwaUserSelection = {}));
var AwaResponseReason;
(function (AwaResponseReason) {
    AwaResponseReason[AwaResponseReason["None"] = 0] = "None";
    /** User provided an answer */
    AwaResponseReason[AwaResponseReason["Answered"] = 1] = "Answered";
    /**
     * The HTTP request timed out, a new request may be made and an answer may still be
     * provided.
     */
    AwaResponseReason[AwaResponseReason["TimedOut"] = 2] = "TimedOut";
    /** This request was replaced by another request. */
    AwaResponseReason[AwaResponseReason["Replaced"] = 3] = "Replaced";
})(AwaResponseReason = exports.AwaResponseReason || (exports.AwaResponseReason = {}));
